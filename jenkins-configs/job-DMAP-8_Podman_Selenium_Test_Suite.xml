<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>Selenium_Suite_Name</string>        <string>APP_Podman_Image</string>        <string>Worker_Node_IP_Address</string>        <string>On_Prem_DMAP_Instance</string>        <string>Selenium_branch</string>        <string>Release_Version</string>        <string>Master_Node_IP_Address</string>        <string>BuildType</string>        <string>MigrationType</string>        <string>DB_Podman_Image</string>        <string>DMAP_License_Key</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>To run selenium test case in headless mode on centos-9 stream</description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Selenium_branch</name>          <description>Enter the name of the selenium branch.</description>          <defaultValue>Development</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Master_Node_IP_Address</name>          <description>Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.47</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Worker_Node_IP_Address</name>          <description>Please Enter the DMAP Worker Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.47</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Podman_Image</name>          <description>Enter podman image name in which DMAP DB is running</description>          <defaultValue>quay.io/newtglobaldev/ngdmapo/dmap_azure_blob_podman_qa:v8.1.4.2</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Podman_Image</name>          <description>Enter podman image name in which DMAP APP is running</description>          <defaultValue>quay.io/newtglobaldev/ngdmapo/dmap_app_migration_azure_blob_podman_qa:v1.1.4.2</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Release_Version</name>          <description>Please specify the DMAP build version</description>          <defaultValue>8.1.4.2 | 8.3.2.1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>On_Prem_DMAP_Instance</name>          <description>Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Selenium_Suite_Name</name>          <description>Please specify the selenium suite name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Sanity</string>              <string>E2E</string>              <string>Regression</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>BuildType</name>          <description>Please specify the build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Dev</string>              <string>QA</string>              <string>Prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DMAP_License_Key</name>          <description>Please specify the DMAP License Key for Activation</description>          <defaultValue>946374-20A8BE-4E2D8D-B47F5E-FC1506-B4C3E7</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>MigrationType</name>          <description>Please specify Migration Type: App Migration or DB Migration</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>DB Migration</string>              <string>App Migration</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>      <triggers/>    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>8_Podman_Selenium_Test_Suite/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline {	 agent {        node {            label 'build_slave_podman'        }    }		environment {		APPLICATION_NAME = "DMAP Selenium Automation"		NOTIFYUSERS = 'dmap_dev@newtglobalcorp.com'		PATH = "/home/newtdba/.nvm/versions/node/v18.3.0/bin:/home/newtdba/.local/bin:/home/newtdba/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/newtdba/.nvm/versions/node/v16.18.1/bin/ng:/var/lib/jenkins/sonar-scanner-4.8.1.3023/bin:/usr/lib/jvm/java-11-openjdk-11.0.20.1.1-2.el9.x86_64/bin/java:/home/newtdba/.local/bin/bandit:/opt/sonar-scanner/bin:$PATH"        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk-11.0.20.1.1-2.el9.x86_64'	   	BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"	}		parameters {	    string(name: 'Selenium_branch', defaultValue: 'Development', description: 'Enter the name of the selenium branch.')        string(name: 'Master_Node_IP_Address', defaultValue: '192.168.1.47', description: 'Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.')		string(name: 'Worker_Node_IP_Address', defaultValue: '192.168.1.47', description: 'Please Enter the DMAP Worker Node IP Address of the server on which DMAP is running.')		string(name: 'DB_Podman_Image', defaultValue: 'quay.io/newtglobaldev/ngdmapo/dmap_azure_blob_podman_qa:v8.1.4.2', description: 'Enter podman image name in which DMAP DB is running')		string(name: 'APP_Podman_Image', defaultValue: 'quay.io/newtglobaldev/ngdmapo/dmap_app_migration_azure_blob_podman_qa:v1.1.4.2', description: 'Enter podman image name in which DMAP APP is running')		string(name: 'Release_Version', defaultValue: '8.1.4.2 | 8.3.2.1', description: 'Please specify the DMAP build version')		choice(name: 'On_Prem_DMAP_Instance', choices: ['Yes', 'No'], description: 'Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.')		choice(name: 'Selenium_Suite_Name', choices: ['Sanity', 'E2E','Regression'], description: 'Please specify the selenium suite name')		choice(name: 'BuildType', choices: ['Dev', 'QA','Prod'], description: 'Please specify the build type')		string(name: 'DMAP_License_Key', defaultValue: '946374-20A8BE-4E2D8D-B47F5E-FC1506-B4C3E7', description: 'Please specify the DMAP License Key for Activation')		choice(name: 'MigrationType', choices: ['DB Migration', 'App Migration'], description: 'Please specify Migration Type: App Migration or DB Migration')		    }		options {        timestamps()        timeout(time: 6, unit: 'HOURS')        buildDiscarder(logRotator(numToKeepStr: '10'))    }		stages {		stage ("Checkout") {			steps {			    			  dir("Selenium_Automation"){			     deleteDir()				echo "------------------------Checkout Code --------------------------------"				sh "pwd"				//git branch: "${params.Selenium_branch}", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/DMAP_QA_Automation.git'				withCredentials([usernamePassword(credentialsId: 'Kavya_1709', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {					sh """						git clone --depth 5 -b ${params.Selenium_branch} https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/newtglobalgit/DMAP_QA_Automation.git .					   """				}				echo "------------------------ Checkout Code Completed --------------------------------"								echo "------------------------ Replace data in TC001_Login.ini and Config.properties File--------------------------------"                sh """sed -i -e '/^\\[masternodeipfqdn\\]/,/^ip =/ s/^ip = .*/ip = ${Master_Node_IP_Address}/' src/main/resources/TestdataFiles/TC001_Login.ini"""			    sh """sed -i -e '/^\\[appmasternodeipfqdn\\]/,/^ip =/ s/^ip = .*/ip = ${Master_Node_IP_Address}/' src/main/resources/TestdataFiles/TC001_Login.ini"""                sh """sed -i -e '/^\\[Enterprise_License\\]/,/^Key =/ s/^Key = .*/Key = ${DMAP_License_Key}/' src/main/resources/TestdataFiles/TC001_Login.ini"""				sh """sed -i -e '/^\\[NodeData1\\]/,/^ip =/ s/^ip = .*/ip = ${Worker_Node_IP_Address}/' src/main/resources/TestdataFiles/WorkerNode.ini"""                sh """sed -i -e "s/^FeatureName = .*/FeatureName = ${params.MigrationType}/" src/main/resources/Configuration/Config.properties"""				sh """sed -i -e "s/^BuildType = .*/BuildType = ${params.BuildType}/" src/main/resources/Configuration/Config.properties"""				sh """sed -i -e "s/^SuiteName = .*/SuiteName = ${params.Selenium_Suite_Name}/" src/main/resources/Configuration/Config.properties"""				sh """sed -i -e "s/^ReleaseVersion = .*/ReleaseVersion = ${params.Release_Version}/" src/main/resources/Configuration/Config.properties"""				}							   			}		}					 stage ("Build the project") {			steps {			    			    dir("Selenium_Automation"){				echo "------------------------ Build the selenium project --------------------------------"				sh "pwd"				sh "mvn clean package"				echo "------------------------ Selenium Project Build Completed --------------------------------"				sh "pwd"				}			}		} 				stage('Check and Remove Podman Container') {            steps {                script {                    // Define the name of the Podman container you want to check                    def containerName = 'run_db_selenium_master'                    // Check if the Docker container is running                    //def isRunning = sh(script: "podman ps --format '{{.Names}}' | grep -w ${containerName}", returnStatus: true)                    // Check if the Docker container is created but not running                    def isExist = sh(script: "podman ps -a --format '{{.Names}}' | grep -w ${containerName}", returnStatus: true)                    if (isExist == 0) {                        echo "Container ${containerName} is running. Stopping and removing it..."                        // Stop and remove the Podman container                        sh "podman stop ${containerName}"                        sh "podman rm ${containerName}"                    } else {                        echo "Container ${containerName} is not running."                    }                }            }        }		stage ("Start DMAP") {            steps {                script {                    if (params.On_Prem_DMAP_Instance == 'Yes' &amp;&amp; params.MigrationType == 'App Migration') {                        echo "---------------------Creating DMAP DB and App Podman Container---------------------------"                                                sh "podman run -d -it -p 5435:5432 -p 9090:8080 -p 6003:5002 -e UI_PORT=9090 -e SERVICE_PORT=6003  -e DB_PORT=5435 --name=run_db_selenium_master ${params.DB_Podman_Image}"                        sh "podman run -d -it -p 8091:8080 -p 5001:5000 --name=run_app_selenium_master ${params.APP_Podman_Image}"                    sleep 7500                    } else if (params.On_Prem_DMAP_Instance == 'Yes' &amp;&amp; params.Selenium_Suite_Name == 'E2E' || params.Selenium_Suite_Name == 'Regression' &amp;&amp; params.MigrationType == 'DB Migration') {                        echo "---------------------Creating DMAP DB Podman Container---------------------------"                                                sh "podman run -d -it -p 5435:5432 -p 9090:8080 -p 6003:5002 -e UI_PORT=9090 -e SERVICE_PORT=6003  -e DB_PORT=5435 --name=run_db_selenium_master ${params.DB_Podman_Image}"                        sh "podman run -d -it -p 5436:5432 -p 9091:8080 -p 7003:5002 -e UI_PORT=9091 -e SERVICE_PORT=7003  -e DB_PORT=5436 --name=run_db_selenium_worker1 ${params.DB_Podman_Image}"                    sleep 1000                        } else if (params.On_Prem_DMAP_Instance == 'Yes' &amp;&amp; params.Selenium_Suite_Name == 'Sanity' &amp;&amp; params.MigrationType == 'DB Migration') {                        echo "---------------------Creating DMAP DB Podman Container---------------------------"                                                sh "podman run -d -it -p 5435:5432 -p 9090:8080 -p 6003:5002 -e UI_PORT=9090 -e SERVICE_PORT=6003  -e DB_PORT=5435 --name=run_db_selenium_master ${params.DB_Podman_Image}"                    sleep 1000                       }                }            }		}       stage("Running Selenium Test Suite") {    steps {        echo "------------------------ Running Selenium testcases --------------------------------"        script {            def xmlFilePath            // Determine the XML file path based on MigrationType and Selenium_Suite_Name            if (params.MigrationType == 'App Migration') {                echo "---------------- DB Migration Selected ------------------------"                if (params.Selenium_Suite_Name == 'E2E') {                    echo "---------------- DB Migration E2E Selected ------------------------"                    xmlFilePath = 'src/main/resources/TestNG/e2eAppMigration.xml'                } else if (params.Selenium_Suite_Name == 'Sanity') {                    echo "---------------- DB Migration Sanity Selected ------------------------"                    xmlFilePath = 'src/main/resources/TestNG/e2eAppMigration.xml'                } else if (params.Selenium_Suite_Name == 'Regression') {                    echo "---------------- DB Migration Regression Selected ------------------------"                    xmlFilePath = 'src/main/resources/TestNG/RegressionAppMigration.xml'                }            } else if (params.MigrationType == 'DB Migration') {                echo "---------------- App Migration Selected ------------------------"                if (params.Selenium_Suite_Name == 'E2E') {                    echo "---------------- App Migration E2E Selected ------------------------"                    xmlFilePath = 'src/main/resources/TestNG/e2eEnterpriseNewUI.xml'                } else if (params.Selenium_Suite_Name == 'Sanity') {                    echo "---------------- App Migration Sanity Selected ------------------------"                    xmlFilePath = 'src/main/resources/TestNG/Sanity_EnterpriseNewUI.xml'                } else if (params.Selenium_Suite_Name == 'Regression') {                    echo "---------------- App Migration Regression Selected ------------------------"                    xmlFilePath = 'src/main/resources/TestNG/RegressionEnterpriseNewUI.xml'                }            }            // Validate if xmlFilePath is set            if (!xmlFilePath) {                error "No matching XML file found for buildType: ${params.buildType} and Selenium_Suite_Name: ${params.Selenium_Suite_Name}"            }            echo "Using XML file path: ${xmlFilePath}"            // Run the Selenium test with the determined XML file            dir("Selenium_Automation") {                withEnv(['JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.18.0.10-3.el9.x86_64', 'PATH+JAVA=${JAVA_HOME}/bin']) {                    def exitCode = sh(script: "java -cp 'target/XpandionFramework2-0.0.1-SNAPSHOT-jar-with-dependencies.jar' org.testng.TestNG '${xmlFilePath}'", returnStatus: true)                    if (exitCode != 0) {                        echo "Selenium tests completed with exit code ${exitCode}. Ignoring failure."                    }                }            }        }        echo "------------------------ Selenium testcases execution completed --------------------------------"    }}				stage ("Remove Container") {			steps {			    script {		            if (params.On_Prem_DMAP_Instance == 'Yes' &amp;&amp; params.MigrationType == 'App Migration') { 					  echo "------------------Stop selenium testing container ------------------"			          sh "podman stop run_db_selenium_master"					  sh "podman stop run_app_selenium_master"			          sh "podman rm -f run_db_selenium_master"					  sh "podman rm -f run_app_selenium_master"		            }else if(params.On_Prem_DMAP_Instance == 'Yes' &amp;&amp; params.MigrationType == 'DB Migration' &amp;&amp; params.Selenium_Suite_Name == 'Sanity'){					  sh "podman stop run_db_selenium_master"			          sh "podman rm -f run_db_selenium_master"		            }else if(params.On_Prem_DMAP_Instance == 'Yes' &amp;&amp; params.MigrationType == 'DB Migration'){					  sh "podman stop run_db_selenium_master"					  sh "podman stop run_db_selenium_worker1"			          sh "podman rm -f run_db_selenium_master"					  sh "podman rm -f run_db_selenium_worker1" 		            }		            echo "------------------Selenium testing container removed successfully------------------"		        }			}		}  		   }	post {    success {        emailext(            attachmentsPattern: 'Selenium_Automation/extent-reports/Reports/extent-report.html',            subject: "Jenkins Job Report For ${APPLICATION_NAME} ${params.MigrationType} - SUCCESS",            body: "BUILD DETAILS: ${BUILD_DETAILS}      BUILD STATUS: SUCCESS",            to: "${NOTIFYUSERS}"        )    }    failure {        emailext(            subject: "Jenkins Job Report For ${APPLICATION_NAME} ${params.MigrationType} - FAILURE",            body: "BUILD STATUS: FAILURE",            to: "${NOTIFYUSERS}"        )    }}	}</script></flow-definition>