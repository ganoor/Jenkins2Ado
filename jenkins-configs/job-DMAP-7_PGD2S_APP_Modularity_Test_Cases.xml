<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.1"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.1">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>PGD2S_Backend_branch</string>        <string>PGD2S_Docker_Image</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>DMAP Application Modularity Test Case Report Generation Testing</description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>30</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>PGD2S_Backend_branch</name>          <description>Enter the name of the Backend branch</description>          <defaultValue>Development</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>PGD2S_Docker_Image</name>          <description>Enter the Docker image based on the environments</description>          <defaultValue>docker.io/ngdmapo/pgd2s_azure_blob_docker_dev:v0.0.0.3</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>      <triggers/>    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.82">    <script>pipeline {    agent {        node {            label &apos;build_slave_day2_centos&apos;        }    }    environment {		BUILD_NAME = &quot;PGD2S App Modularity Test case report&quot;		//NOTIFYUSERS = &apos;sakthip@newtglobalcorp.com&apos;		NOTIFYUSERS = &apos;pgd2s-devteam@newtglobalcorp.com&apos;	//	NOTIFYUSERS = &apos;chandang@newtglobalcorp.com&apos;		BUILD_DETAILS = &quot;&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}&quot;	}    parameters {        string(name: &apos;PGD2S_Backend_branch&apos;, defaultValue: &apos;Development&apos;, description: &apos;Enter the name of the Backend branch&apos;)	    string(name: &apos;PGD2S_Docker_Image&apos;, defaultValue: &apos;docker.io/ngdmapo/pgd2s_azure_blob_docker_dev:v0.0.0.3&apos;, description: &apos;Enter the Docker image based on the environments&apos;)               }    options {        timestamps()        timeout(time: 5, unit: &apos;HOURS&apos;)        buildDiscarder(logRotator(numToKeepStr: &apos;30&apos;))    }    stages {        stage (&quot;Checkout Code &quot;) {			steps {			    			  			    dir(&quot;Backend&quot;){			        deleteDir()					echo &quot;Checkout the PGD2S Backend code&quot;					git branch: PGD2S_Backend_branch, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/PostgreSQL-Automation_Backend.git&apos;			             }			      }        }	                stage(&apos;Check and Stop Docker Container&apos;) {            steps {                script {                    // Define the name of the Docker container you want to check                    def containerName = &apos;day2support&apos;                    // Check if the Docker container is running                    def isRunning = sh(script: &quot;podman ps --format &apos;{{.Names}}&apos; | grep -w ${containerName}&quot;, returnStatus: true)                    if (isRunning == 0) {                        echo &quot;Container ${containerName} is running. Stopping and removing it...&quot;                        // Stop and remove the Docker container                        sh &quot;podman stop ${containerName}&quot;                        sh &quot;podman rm ${containerName}&quot;                    } else {                        //sh &quot;docker rm ${containerName}&quot;                        echo &quot;Container ${containerName} is not running.&quot;                    }                }            }        }                stage (&quot;Start Db Container&quot;) {            steps{                //sh &quot;docker stop day2support&quot;                //sh &quot;docker rm day2support&quot;                sh &quot;podman run --replace -d -it -p 5438:5432 -p 9096:8080 -p 5002:5002 -e UI_PORT=9096 -e SERVICE_PORT=5002  -e DB_PORT=5438 --name=day2support docker.io/ngdmapo/pgd2s_azure_blob_docker_dev:v0.0.0.3&quot;            }        }		stage (&quot;Modular Tests&quot;) {		    steps {				echo &quot;---------------------Creating App build container for modular test start---------------------------&quot;				//sh &quot;docker stop run_modular_test_scripts&quot;                //sh &quot;docker rm run_modular_test_scripts&quot;				withCredentials([string(credentialsId: &apos;GIT_User&apos;, variable: &apos;GITUser&apos;),string(credentialsId: &apos;Git_New_PAT&apos;, variable: &apos;Password&apos;)]) {                    sh &quot;podman run -d -it -e GIT_USER=${GITUser} -e GIT_PASS=${Password} -e GIT_BRANCH=${params.PGD2S_Backend_branch} -p 5005:5000 --name=run_modular_test_scripts ${params.PGD2S_Docker_Image}&quot;                    				                }						    echo &quot;---------------------Creating App build container for modular test end---------------------------&quot;				echo &quot;------------------Wait 20 minutes to start App Services-------------------------------&quot;				sleep 600				dir(&quot;Backend&quot;){					echo &quot;------------------List the Running and stopped Docker process ------------------------------&quot;					sh &quot;podman ps -a&quot;					echo &quot;------------------Copy the modularTest Shell script to DMAP app running container ------------------------------&quot;					sh &quot;podman cp run_modularTest.sh run_modular_test_scripts:/usr/local/tomcat&quot;					echo &quot;------------Copied modular test build script inside build container------------------&quot;										echo &quot;------------Start modular test build script inside build container by using the root user ------------------&quot;					sh &quot;podman exec --user root run_modular_test_scripts sh /usr/local/tomcat/run_modularTest.sh&quot;					sleep 180										echo &quot;------------Copying modular test cases reports------------------&quot;					//sh &quot;docker exec -it run_modular_test_scripts ls /usr/local/tomcat&quot;					sh &quot;podman cp run_modular_test_scripts:/usr/local/tomcat/PostgreSQL-Automation_Backend/ModularityTesting/ModularTestOutput.xlsx .&quot;					sh &quot;podman cp run_modular_test_scripts:/usr/local/tomcat/PostgreSQL-Automation_Backend/htmlcov/index.html .&quot;					sh &quot;mv index.html ModularTestCoverageReport.html&quot;					echo &quot;------------Completed copying modular test cases reports------------------&quot;										echo &quot;------------Removing modular test container ------------------&quot;					sh &quot;podman stop run_modular_test_scripts&quot;					sh &quot;podman rm -f run_modular_test_scripts&quot;					//sh &quot;docker stop dmap_db_prod_azure_enterprise_master&quot;					//sh &quot;docker rm -f dmap_db_prod_azure_enterprise_master&quot;										echo &quot;------------Modular test container removed successfully------------------&quot;					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;ModularTestOutput.xlsx&apos;, reportName: &apos;Modular Test Output&apos;, reportTitles: &apos;Modular Test Output&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;ModularTestCoverageReport.html&apos;, reportName: &apos;Modular Test Coverage&apos;, reportTitles: &apos;Modular Test Coverage&apos;])				}			}		}    }    post {        always {            emailext attachmentsPattern: &apos;Backend/ModularTestOutput.xlsx, Backend/ModularTestCoverageReport.html&apos;,            subject: &quot;Jenkins Job Report For ${BUILD_NAME} - ${currentBuild.currentResult}&quot;,			body: &quot;BUILD DETAILS: ${BUILD_DETAILS} &lt;BR&gt; BUILD STATUS: ${currentBuild.currentResult}&quot;,			to: &quot;${NOTIFYUSERS}&quot;        }    }}</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>