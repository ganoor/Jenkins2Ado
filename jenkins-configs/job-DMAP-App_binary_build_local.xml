<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>build_app_image</string>        <string>service_pack_location</string>        <string>Latest_dmap_image_version</string>        <string>Storage_Location</string>        <string>Build_Image</string>        <string>S3_Bucket</string>        <string>Blob_Storage</string>        <string>Build_Type</string>        <string>Service_pack_version</string>        <string>Flask_Backend_branch</string>        <string>Change_in_binary_for</string>        <string>Minimum_dmap_image_version</string>        <string>sonarSeverities</string>        <string>Container_Name</string>        <string>docker_branch</string>        <string>sonarTypes</string>        <string>docker_image_version</string>        <string>docker_image</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>Job to Build the image and binary. push binary into docker hub and push the image into Azure registry.</description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Flask_Backend_branch</name>          <description>Enter the name of the Backend branch</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Container_Name</name>          <description>Enter the name of the container in lower case, example: you can put your name</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Build_Image</name>          <description>Enter the name of the docker build image which will be used to build binaries</description>          <defaultValue>ngdmapo/app_build:v1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Service_pack_version</name>          <description>Enter the version of Service pack. Sample values will be like: 6.3.2.0</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Latest_dmap_image_version</name>          <description>Enter the latest version of DMAP image. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Minimum_dmap_image_version</name>          <description>Enter the Minimum version of DMAP DB image to run current binaries. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Change_in_binary_for</name>          <description>Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>App</string>              <string>DB</string>              <string>Both</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Storage_Location</name>          <description>Enter the storage location to store Service pack which is either in S3 or BLOB</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>AWS_S3</string>              <string>Azure_Blob</string>              <string>Both</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>S3_Bucket</name>          <description>Enter the S3 Bucket path for uploading the binaries. Sample values will be like dev: dmap-deployment/dev, qa: dmap-deployment/qa, prod: dmap-deployment/prod</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Blob_Storage</name>          <description>Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapextndevreleases, qa: dmapextnqareleases, prod: dmapextnreleases</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarTypes</name>          <description>Enter the sonarQube issue types to certify the build</description>          <defaultValue>VULNERABILITY,BUG,CODE_SMELL</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarSeverities</name>          <description>Enter the sonarQube issue severities to certify the build</description>          <defaultValue>CRITICAL,BLOCKER,MAJOR</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Build_Type</name>          <description>Select build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Dev</string>              <string>QA</string>              <string>Prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>docker_image</name>          <description>Select Docker Image name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>dmap_app_migration_azure_blob_dev</string>              <string>dmap_app_migration_azure_blob_qa</string>              <string>dmap_app_migration_azure_blob_prod</string>              <string>dmap_aws_s3_prod</string>              <string>dmap_aws_s3_dev</string>              <string>dmap_aws_s3_qa</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>docker_branch</name>          <description>Enter git branch to pull docker files</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>docker_image_version</name>          <description>Enter the Docker Image version</description>          <defaultValue>v1.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>service_pack_location</name>          <description>Enter service pack location (S3/BLOB). It should be full path</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>build_app_image</name>          <description>Select Yes if you want to build the App Image or else select No</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>No</string>              <string>Yes</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <script>pipeline {    agent {        node {            label &apos;build_slave&apos;        }    }    environment {		BUILD_NAME = &quot;DMAP App Binary Build&quot;		NOTIFYUSERS = &apos;vardhamansankar@newtglobalcorp.com&apos;		//NOTIFYUSERS = &apos;dmap_dev@newtglobalcorp.com&apos;		BUILD_DETAILS = &quot;&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}&quot;	}    parameters {        string(name: &apos;Flask_Backend_branch&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter the name of the Backend branch&apos;)	    string(name: &apos;Container_Name&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the name of the container in lower case, example: you can put your name&apos;)        string(name: &apos;Build_Image&apos;, defaultValue: &apos;ngdmapo/app_build:v1&apos;, description: &apos;Enter the name of the docker build image which will be used to build binaries&apos;)        string(name: &apos;Service_pack_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the version of Service pack. Sample values will be like: 6.3.2.0&apos;)        string(name: &apos;Latest_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the latest version of DMAP image. Sample values be like:7.4.2.1&apos;)        string(name: &apos;Minimum_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Minimum version of DMAP DB image to run current binaries. Sample values be like:7.4.2.1&apos;)        choice(name: &apos;Change_in_binary_for&apos;, choices: [&apos;App&apos;, &apos;DB&apos;,&apos;Both&apos;], description: &apos;Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)&apos;)        choice(name: &apos;Storage_Location&apos;, choices: [&apos;AWS_S3&apos;, &apos;Azure_Blob&apos;,&apos;Both&apos;], description: &apos;Enter the storage location to store Service pack which is either in S3 or BLOB&apos;)		string(name: &apos;S3_Bucket&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the S3 Bucket path for uploading the binaries. Sample values will be like dev: dmap-deployment/dev, qa: dmap-deployment/qa, prod: dmap-deployment/prod&apos;)		string(name: &apos;Blob_Storage&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapextndevreleases, qa: dmapextnqareleases, prod: dmapextnreleases&apos;)        string(name: &apos;sonarTypes&apos;, defaultValue: &apos;VULNERABILITY,BUG,CODE_SMELL&apos;, description: &apos;Enter the sonarQube issue types to certify the build&apos;)        string(name: &apos;sonarSeverities&apos;, defaultValue: &apos;CRITICAL,BLOCKER,MAJOR&apos;, description: &apos;Enter the sonarQube issue severities to certify the build&apos;)        choice(name: &apos;Build_Type&apos;, choices: [&apos;Dev&apos;, &apos;QA&apos;, &apos;Prod&apos;], description: &apos;Select build type&apos;)        choice(name: &apos;build_app_image&apos;, choices: [&apos;No&apos;, &apos;Yes&apos;], description: &apos;Select Yes if you want to build the App Image or else select No&apos;)        choice(name: &apos;docker_image&apos;, choices: [&apos;dmap_app_migration_azure_blob_dev&apos;,&apos;dmap_app_migration_azure_blob_qa&apos;,&apos;dmap_app_migration_azure_blob_prod&apos;,&apos;dmap_aws_s3_prod&apos;,&apos;dmap_aws_s3_dev&apos;, &apos;dmap_aws_s3_qa&apos;,], description: &apos;Select Docker Image name&apos;)	    string(name: &apos;docker_branch&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter git branch to pull docker files&apos;)        string(name: &apos;docker_image_version&apos;, defaultValue: &apos;v1.0.0.0&apos;, description: &apos;Enter the Docker Image version&apos;)        string(name: &apos;service_pack_location&apos;, defaultValue: &apos;&apos;, description: &apos;Enter service pack location (S3/BLOB). It should be full path&apos;)        }    options {        timestamps()        timeout(time: 5, unit: &apos;HOURS&apos;)        buildDiscarder(logRotator(numToKeepStr: &apos;10&apos;))    }    stages {        stage (&quot;Checkout Code &quot;) {			steps {			    			     dir(&quot;DMAP_Extension_flask&quot;) {			        deleteDir()                    echo &quot;Checkout the DMAP_Extension_Flask code&quot;                    script {                        withCredentials([usernamePassword(credentialsId: &apos;Kavya_1709&apos;, usernameVariable: &apos;GIT_USERNAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;)]) {                        	git url: &quot;https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/newtglobalgit/DMAP_Extension-Flask.git&quot;, branch: &apos;${Flask_Backend_branch}&apos;                        }                    }			    }                dir(&quot;DMAP_App_Docker&quot;){			        deleteDir()					echo &quot;Checkout the DMAP_DB_Dockerfile&quot;					git branch: docker_branch, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_Extension_Docker_Linux.git&apos;			        } 			      }        }				stage (&quot;Flask Backend Build&quot;){			steps{				    echo &quot;Create Binaries&quot;                   sh &quot;docker pull ngdmapo/app_build:v1&quot;                 sh &quot;docker run -it -d -p 5009:5002 -p 9099:8080 --name=${params.Container_Name} ngdmapo/app_build:v1&quot;				    echo &quot;---------------------Completed creating build container---------------------------&quot;                    dir(&quot;DMAP_Extension_flask&quot;){                    echo &quot;------------------Build container created-------------------------------&quot;					sh &quot;docker ps -a&quot;                    sh &quot;docker cp . ${params.Container_Name}:/usr/local/tomcat/DMAP_Extension-Flask&quot;					sh &quot;docker cp BuildScript/make_backend.sh ${params.Container_Name}:/usr/local/tomcat&quot;					echo &quot;------------Copied build scipt inside build container------------------&quot;					sh &quot;docker exec --user=root ${params.Container_Name} sh /usr/local/tomcat/make_backend.sh&quot;					echo &quot;----------------------------Binaries created-------------------------------&quot;					sh &quot;docker cp ${params.Container_Name}:/usr/local/tomcat/DMAP_Extension-Flask/dist/Service.tar .&quot;					echo &quot;------------------------Copied binaries in Jenkins----------------------&quot;					sh &quot;cp Service.tar ../&quot;			      }                echo &quot;------------------Removing Build container ------------------&quot;				sh &quot;docker stop ${params.Container_Name}&quot;			    sh &quot;docker rm -f ${params.Container_Name}&quot;			    echo &quot;------------------Build container removed successfully------------------&quot;			}		}	        stage (&quot;Package Binary&quot;){			steps {			    echo &quot;------------------Package Binary------------------&quot;			    script {			      def now = new Date()			      def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))			      writeFile(file: &apos;dmap_release.yaml&apos;, text:&quot;product_name: DMAP\nbinary_version: ${params.Service_pack_version}\nminimal_supported_image_version: ${params.Minimum_dmap_image_version}\ndate_published: ${time}\nbuild_type: ${params.Build_Type}&quot;)			      sh &quot;tar cvf dmap_release.tar Service.tar dmap_release.yaml&quot;			    }			}		}    }    post {        always {            emailext attachmentsPattern: &apos;DMAP_Extension_flask/AppBanditAnalysisReport.html,DMAP_Extension_Backend/snyk_report.html,DMAP_Extension_Backend/DMAP_App_Junit_CoverageReport.html,DMAP_Extension_Backend/DMAP_App_Junit_PassFailReport.html,DMAP_Extension_flask/SonarQube/App_Python_Sonar_Issues.xlsx,DMAP_Extension_flask/SonarQube/App_Java_Sonar_Issues.xlsx,DMAP_Extension_flask/ModularTestCoverageReport.html,DMAP_Extension_flask/ModularTestOutput.html&apos;,            subject: &quot;Jenkins Job Report For ${BUILD_NAME} - ${currentBuild.currentResult}&quot;,			body: &quot;BUILD DETAILS: ${BUILD_DETAILS} &lt;BR&gt; BUILD STATUS: ${currentBuild.currentResult}&quot;,			to: &quot;${NOTIFYUSERS}&quot;        }    }}</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>