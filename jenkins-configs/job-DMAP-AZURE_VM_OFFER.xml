<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties/>      <triggers/>      <parameters>        <string>VERSION_COMPONENT</string>        <string>APP_IMAGE_NAME</string>        <string>DB_IMAGE_NAME</string>        <string>APP_IMAGE_VERSION</string>        <string>DB_IMAGE_VERSION</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description/>  <keepDependencies>false</keepDependencies>  <properties>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.ChoiceParameterDefinition>          <name>VERSION_COMPONENT</name>          <description>Select the version component to increment (default is patch)</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>patch</string>              <string>minor</string>              <string>major</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_IMAGE_NAME</name>          <description>DMAP DB Image Name</description>          <defaultValue>ngdmapo/dmap_db_prod</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_IMAGE_VERSION</name>          <description>DMAP DB Image Version</description>          <defaultValue>latest</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_IMAGE_NAME</name>          <description>DMAP App Image Name</description>          <defaultValue>ngdmapo/dmap_app_prod</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_IMAGE_VERSION</name>          <description>DMAP App Image Version</description>          <defaultValue>latest</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>AZURE_VM_OFFER/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline{    agent {        node {            label 'build_slave'        }    }    environment {		BUILD_NAME = "Azure VM Image"		NOTIFYUSERS = 'dmap_dev@newtglobalcorp.com'		BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"		        AZURE = credentials('azure_5k_subscription')        GALLERY_RG = 'Azure_VM_Based_Offer'        GALLERY_NAME = 'NewtGlobalConsultingLLC'        DEFENITION = 'DMAP'	}         parameters {        choice(name: 'VERSION_COMPONENT', choices: ['patch', 'minor', 'major'], description: 'Select the version component to increment (default is patch)')        string(name: 'DB_IMAGE_NAME', defaultValue: 'ngdmapo/dmap_db_prod', description: 'DMAP DB Image Name')        string(name: 'DB_IMAGE_VERSION', defaultValue: 'latest', description: 'DMAP DB Image Version')        string(name: 'APP_IMAGE_NAME', defaultValue: 'ngdmapo/dmap_app_prod', description: 'DMAP App Image Name')        string(name: 'APP_IMAGE_VERSION', defaultValue: 'latest', description: 'DMAP App Image Version')    }        stages {        stage('Checkout') {            steps {                                git branch: "main", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/Azure_VM_Offer_terraform.git'                            sh """            az login  --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID                        az account set --subscription $AZURE_SUBSCRIPTION_ID                           """                    withCredentials([string(credentialsId: 'azure_6k_subscription_id', variable: 'SUBSCRIPTION_ID_6K1')]) {            script {                // Set SUBSCRIPTION_ID as a global environment variable                env.SUBSCRIPTION_ID_6K1 = "${SUBSCRIPTION_ID_6K1}"            }         }            }        }                 stage('Create VM in Azure') {            steps {                script {                                        sh """            export ARM_SUBSCRIPTION_ID="$AZURE_SUBSCRIPTION_ID"            export ARM_CLIENT_ID="$AZURE_CLIENT_ID"            export ARM_CLIENT_SECRET="$AZURE_CLIENT_SECRET"            export ARM_TENANT_ID="$AZURE_TENANT_ID"                        terraform init -upgrade            terraform apply -auto-approve        """                 // Capture the Terraform output for resource group, VM name, and location            def resourceGroup = sh(script: 'terraform output -raw resourceGroups', returnStdout: true).trim()            def vmName = sh(script: 'terraform output -raw vm_name', returnStdout: true).trim()            def location = sh(script: 'terraform output -raw location', returnStdout: true).trim()                        // Assign these to environment variables for later stages            env.RESOURCE_GROUP = resourceGroup            env.VM_NAME = vmName            env.LOCATION = location                }            }        }                stage('Install Docker') {            steps {                sh '''                az vm run-command invoke -g ${RESOURCE_GROUP} -n ${VM_NAME} --command-id RunShellScript --scripts "                  sudo yum install -y yum-utils                  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo                  sudo yum install -y docker-ce docker-ce-cli containerd.io                  sudo systemctl start docker                  sudo systemctl enable docker                  "                '''            }        }      stage('Pull DMAP') {            steps {                withCredentials([usernamePassword(credentialsId: 'DockerHubCred', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {                            sh """                    az vm run-command invoke -g ${RESOURCE_GROUP} -n ${VM_NAME} --command-id RunShellScript --scripts \"                      sudo docker rmi \$(sudo docker images -q) --force                      sudo docker login -u ${dockerHubUser} -p ${dockerHubPassword}                      sudo docker pull ${params.DB_IMAGE_NAME}:${params.DB_IMAGE_VERSION}                      sudo docker pull ${params.APP_IMAGE_NAME}:${params.APP_IMAGE_VERSION}                      \"                    """                }            }        }                stage('Generalization') {            steps {                // Run VM configuration commands                    sh '''                    az vm run-command invoke -g ${RESOURCE_GROUP} -n ${VM_NAME} --command-id RunShellScript --scripts "                    sudo rm /home/azureuser/.ssh/authorized_keys                    sudo yum install -y NetworkManager                    sudo systemctl enable NetworkManager.service                     sudo systemctl restart NetworkManager.service                     echo 'HOSTNAME=localhost.localdomain' | sudo tee -a /etc/sysconfig/network                    echo 'PEERDNS=yes' | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth0                    echo 'IPV6INIT=no' | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth0                    echo 'NM_CONTROLLED=no' | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth0                    sudo ln -s /dev/null /etc/udev/rules.d/75-persistent-net-generator.rules                    sudo yum clean all                    sudo yum -y update                    sudo sed -i 's/GRUB_CMDLINE_LINUX="\\(.*\\)"/GRUB_CMDLINE_LINUX="\\1 net.ifnames=0"/' /etc/default/grub                    sudo grub2-mkconfig -o /boot/grub2/grub.cfg                    sudo systemctl enable waagent                    sudo systemctl enable NetworkManager.service                     sudo systemctl restart NetworkManager.service                     sudo rm -f /var/log/waagent.log                    sudo cloud-init clean                    "                '''                sh '''                  az vm run-command invoke -g AZURE_VMOFFER -n VM --command-id RunShellScript --parameters '["sudo waagent -force -deprovision+user"]' --verbose                '''                sh '''                     az vm run-command invoke -g ${RESOURCE_GROUP} -n ${VM_NAME} --command-id RunShellScript --scripts "                    rm -f ~/.bash_history                    export HISTSIZE=0"                    '''            }        }        stage('Create VM Image') {            steps {                script {                    // Get the latest version from Azure using Azure CLI                    def latestVersion = sh(                        script: """                        az sig image-version list \                            --resource-group ${GALLERY_RG} \                            --gallery-name ${GALLERY_NAME} \                            --gallery-image-definition ${DEFENITION} \                            --query '[-1].name' \                            --output tsv                        """,                        returnStdout: true                    ).trim()                                    echo "${latestVersion}"                    // Error handling if the latest version is not retrieved                    if (!latestVersion) {                        error "Failed to retrieve the latest version"                    }                    // Parse the latest version (assuming major.minor.patch format)                    def versionParts = latestVersion.tokenize('.')                    if (versionParts.size() &lt; 3) {                        error "Version format is incorrect: ${latestVersion}"                    }                    def major = versionParts[0].toInteger()                    def minor = versionParts[1].toInteger()                    def patch = versionParts[2].toInteger()                    // Retrieve the parameter (VERSION_COMPONENT) passed from "Build with Parameters"                    def incrementType = params.VERSION_COMPONENT ?: 'patch' // Default to 'patch' if not provided                    // Increment the selected version component                    switch (incrementType) {                        case 'major':                            major += 1                            minor = 0 // Reset minor and patch when major is incremented                            patch = 0                            break                        case 'minor':                            minor += 1                            patch = 0 // Reset patch when minor is incremented                            break                        default: // Default case is 'patch'                            patch += 1                            break                    }                    // Construct new version                def newVersion = "${major}.${minor}.${patch}"                echo "new version: ${newVersion}"                env.VERSION = newVersion    sh """az vm deallocate --resource-group ${RESOURCE_GROUP} --name ${VM_NAME}    az vm generalize --resource-group ${RESOURCE_GROUP} --name ${VM_NAME}"""sleep(180)sh """az sig image-version create --resource-group ${GALLERY_RG} \--gallery-name ${GALLERY_NAME} \--gallery-image-definition ${DEFENITION} \--gallery-image-version ${VERSION} \--virtual-machine /subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.Compute/virtualMachines/${VM_NAME} \--tags "Owner-RM Name=DK" "Owner-RM Email=debendrak@newtglobalcorp.com" "Owner-RM Phone Number=9823050763" "POC Name=Azure VM Offer""""                }            }        }        stage('Clone VM Image') {            steps {                script {                     def VERSION = sh(                        script: """                        az sig image-version list \                            --resource-group ${GALLERY_RG} \                            --gallery-name ${GALLERY_NAME} \                            --gallery-image-definition ${DEFENITION} \                            --query '[-1].name' \                            --output tsv                        """,                        returnStdout: true                    ).trim()                    sh """az account set --subscription ${SUBSCRIPTION_ID_6K1}"""                                        // Get the latest version from Azure using Azure CLI                    def latestVersion = sh(                        script: """                        az sig image-version list \                            --resource-group ${GALLERY_RG} \                            --gallery-name NewtGlobal \                            --gallery-image-definition NewtDMAP \                            --query '[-1].name' \                            --output tsv                        """,                        returnStdout: true                    ).trim()                                    echo "${latestVersion}"                    // Error handling if the latest version is not retrieved                    if (!latestVersion) {                        error "Failed to retrieve the latest version"                    }                    // Parse the latest version (assuming major.minor.patch format)                    def versionParts = latestVersion.tokenize('.')                    if (versionParts.size() &lt; 3) {                        error "Version format is incorrect: ${latestVersion}"                    }                    def major = versionParts[0].toInteger()                    def minor = versionParts[1].toInteger()                    def patch = versionParts[2].toInteger()                    // Retrieve the parameter (VERSION_COMPONENT) passed from "Build with Parameters"                    def incrementType = params.VERSION_COMPONENT ?: 'patch' // Default to 'patch' if not provided                    // Increment the selected version component                    switch (incrementType) {                        case 'major':                            major += 1                            minor = 0 // Reset minor and patch when major is incremented                            patch = 0                            break                        case 'minor':                            minor += 1                            patch = 0 // Reset patch when minor is incremented                            break                        default: // Default case is 'patch'                            patch += 1                            break                    }                    // Construct new version                def newVersion = "${major}.${minor}.${patch}"                echo "new version: ${newVersion}"                    sh """                az sig image-version create --resource-group Azure_VM_Based_Offer --gallery-name NewtGlobal --gallery-image-definition NewtDMAP --gallery-image-version ${newVersion}  --location eastus --replica-count 1 --managed-image  /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${GALLERY_RG}/providers/Microsoft.Compute/galleries/${GALLERY_NAME}/images/${DEFENITION}/versions/${VERSION} --tags "Owner-RM Name=DK" "Owner-RM Email=debendrak@newtglobalcorp.com" "Owner-RM Phone Number=9823050763" "POC Name=Azure VM Offer"            """                }            }        }            }        post {         failure {            sleep(180)        }        always {         // Destroy Terraform infrastructure        sh """            export ARM_SUBSCRIPTION_ID="$AZURE_SUBSCRIPTION_ID"            export ARM_CLIENT_ID="$AZURE_CLIENT_ID"            export ARM_CLIENT_SECRET="$AZURE_CLIENT_SECRET"            export ARM_TENANT_ID="$AZURE_TENANT_ID"        terraform destroy -auto-approve        """                         // Send email notification        emailext(            attachmentsPattern: '',            subject: "Jenkins Job Report For ${env.JOB_NAME} - ${currentBuild.currentResult}",            body: """            BUILD DETAILS: ${env.BUILD_URL} &lt;BR&gt;            BUILD STATUS: ${currentBuild.currentResult}            """,            to: "${env.NOTIFYUSERS}"        )        }    }}</script></flow-definition>