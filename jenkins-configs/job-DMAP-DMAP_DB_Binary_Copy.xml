<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>RestAssured_Docker_Image</string>        <string>License_Required</string>        <string>Run_RestAssured_Test_Cases</string>        <string>MigrationType</string>        <string>Build_Image</string>        <string>Blob_Storage</string>        <string>Build_Type</string>        <string>APP_Podman_Image</string>        <string>Run_Modular_Test_Cases</string>        <string>Run_Selenium_Suite</string>        <string>sonarSeverities</string>        <string>DB_Podman_Image</string>        <string>Backend_branch</string>        <string>UI_branch</string>        <string>Fallback_Blob_URL_for_binary_download</string>        <string>Storage_location</string>        <string>Modular_Port</string>        <string>Worker_Node_IP_Address</string>        <string>Selenium_branch</string>        <string>Release_Version</string>        <string>RestAssured_Ip</string>        <string>Latest_dmap_image_version</string>        <string>RestAssured_Port</string>        <string>Selenium_Suite_Name</string>        <string>Service_pack_version</string>        <string>VM_URL_for_binary_download</string>        <string>Modular_Ip</string>        <string>On_Prem_DMAP_Instance</string>        <string>Minimal_dmap_image_version</string>        <string>Modular_Docker_Image</string>        <string>Master_Node_IP_Address</string>        <string>OnPrem_Path</string>        <string>Container_Name</string>        <string>sonarTypes</string>        <string>DMAP_License_Key</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description></description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>UI_branch</name>          <description>Enter the name of the UI branch</description>          <defaultValue>Developer</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Backend_branch</name>          <description>Enter the name of the Backend branch</description>          <defaultValue>Developer</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Build_Image</name>          <description>Enter the name of the docker build image which will be used to build binaries</description>          <defaultValue>ngdmapo/dmap_build:v6</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Container_Name</name>          <description>Enter the name of the container in lower case, example: you can put your name</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Service_pack_version</name>          <description>Enter the version of Service pack. Sample values will be like: 6.3.2.0</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Latest_dmap_image_version</name>          <description>Enter the latest version of DMAP image. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Minimal_dmap_image_version</name>          <description>Enter minimum version of DMAP image required to run these binaries. Sample values will be like: 7.4.2.0</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Storage_location</name>          <description>Enter the storage location to store Service pack which is BLOB</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Azure_Blob</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Blob_Storage</name>          <description>Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapdevreleases, qa: dmapqareleases, prod: dmapreleases</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>License_Required</name>          <description>True : then license module will be enabled, False: then license module will be disabled in binaries</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>True</string>              <string>False</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarTypes</name>          <description>Enter the sonarQube issue types to certify the build</description>          <defaultValue>VULNERABILITY,BUG,CODE_SMELL</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarSeverities</name>          <description>Enter the sonarQube issue severities to certify the build</description>          <defaultValue>CRITICAL,BLOCKER,MAJOR</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Build_Type</name>          <description>Select build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Dev</string>              <string>QA</string>              <string>Prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>VM_URL_for_binary_download</name>          <description>Enter the On Prem VM URL to download binaries from</description>          <defaultValue>http://192.168.3.183</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>OnPrem_Path</name>          <description>On Prem Path to copy the file Dev:dev QA:qa</description>          <defaultValue>db/</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Fallback_Blob_URL_for_binary_download</name>          <description>Enter the fallback blob URL to download binaries from</description>          <defaultValue>https://msmkdmapdisks.blob.core.windows.net</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_RestAssured_Test_Cases</name>          <description>Configure this parameter to Yes if you want to automatically run RestAssured pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>RestAssured_Ip</name>          <description>Enter the IP</description>          <defaultValue>localhost</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>RestAssured_Port</name>          <description>Enter the Port</description>          <defaultValue>5004</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>RestAssured_Docker_Image</name>          <description>Enter the Docker_Image</description>          <defaultValue>ngdmapo/dmap_db_dev:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_Modular_Test_Cases</name>          <description>Configure this parameter to Yes if you want to automatically run ModulerTest pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>No</string>              <string>Yes</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Modular_Ip</name>          <description>Enter the IP</description>          <defaultValue>localhost</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Modular_Port</name>          <description>Enter the Port</description>          <defaultValue>5003</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Modular_Docker_Image</name>          <description>Enter the Docker_Image</description>          <defaultValue>ngdmapo/dmap_db_dev:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_Selenium_Suite</name>          <description>Configure this parameter to Yes if you want to automatically run Selenium suite pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Selenium_branch</name>          <description>Enter the name of the selenium branch.</description>          <defaultValue>Development</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Master_Node_IP_Address</name>          <description>Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.47</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Worker_Node_IP_Address</name>          <description>Please Enter the DMAP Worker Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.47</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Podman_Image</name>          <description>Enter podman image name in which DMAP DB is running</description>          <defaultValue>quay.io/newtglobaldev/ngdmapo/dmap_db_dev:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Podman_Image</name>          <description>Enter podman image name in which DMAP APP is running</description>          <defaultValue>quay.io/newtglobaldev/ngdmapo/dmap_app_dev:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Release_Version</name>          <description>Please specify the DMAP build version</description>          <defaultValue>8.1.4.3 | 8.3.4.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>On_Prem_DMAP_Instance</name>          <description>Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Selenium_Suite_Name</name>          <description>Please specify the selenium suite name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Sanity</string>              <string>E2E</string>              <string>Regression</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DMAP_License_Key</name>          <description>Please specify the DMAP License Key for Activation</description>          <defaultValue>946374-20A8BE-4E2D8D-B47F5E-FC1506-B4C3E7</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>MigrationType</name>          <description>Please specify Migration Type: App Migration or DB Migration</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>DB Migration</string>              <string>App Migration</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Change_in_binary_for</name>          <description>Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Both</string>              <string>DB</string>              <string>App</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <script>pipeline {	 agent {        node {            label &apos;build_slave&apos;        }    }		environment {		BUILD_NAME = &quot;DMAP Binary Build&quot;		NOTIFYUSERS = &apos;dmap_dev@newtglobalcorp.com&apos;		//NOTIFYUSERS = &apos;kavyasrim@newtglobalcorp.com&apos;		BUILD_DETAILS = &quot;&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}&quot;	}	tools {      nodejs &quot;nodejs&quot;    }		parameters {	    string(name: &apos;UI_branch&apos;, defaultValue: &apos;Developer&apos;, description: &apos;Enter the name of the UI branch&apos;)	    string(name: &apos;Backend_branch&apos;, defaultValue: &apos;Developer&apos;, description: &apos;Enter the name of the Backend branch&apos;)	    string(name: &apos;Build_Image&apos;, defaultValue: &apos;ngdmapo/dmap_build:v6&apos;, description: &apos;Enter the name of the docker build image which will be used to build binaries&apos;)        string(name: &apos;Container_Name&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the name of the container in lower case, example: you can put your name&apos;)        string(name: &apos;Service_pack_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the version of Service pack. Sample values will be like: 6.3.2.0&apos;)        string(name: &apos;Latest_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the latest version of DMAP image. Sample values be like:7.4.2.1&apos;)        string(name: &apos;Minimal_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter minimum version of DMAP image required to run these binaries. Sample values will be like: 7.4.2.0&apos;)        choice(name: &apos;Storage_location&apos;, choices: [&apos;Azure_Blob&apos;], description: &apos;Enter the storage location to store Service pack which is BLOB&apos;)		string(name: &apos;Blob_Storage&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapdevreleases, qa: dmapqareleases, prod: dmapreleases&apos;)		choice(name: &apos;License_Required&apos;, choices: [&apos;True&apos;, &apos;False&apos;], description: &apos;True : then license module will be enabled, False: then license module will be disabled in binaries&apos;)		string(name: &apos;sonarTypes&apos;, defaultValue: &apos;VULNERABILITY,BUG,CODE_SMELL&apos;, description: &apos;Enter the sonarQube issue types to certify the build&apos;)        string(name: &apos;sonarSeverities&apos;, defaultValue: &apos;CRITICAL,BLOCKER,MAJOR&apos;, description: &apos;Enter the sonarQube issue severities to certify the build&apos;)        choice(name: &apos;Build_Type&apos;, choices: [&apos;Dev&apos;, &apos;QA&apos;,&apos;Prod&apos;], description: &apos;Select build type&apos;)        string(name: &apos;VM_URL_for_binary_download&apos;, defaultValue: &apos;http://192.168.3.183&apos;, description: &apos;Enter the On Prem VM URL to download binaries from&apos;)        string(name: &apos;OnPrem_Path&apos;, defaultValue: &apos;db/&apos;, description: &apos;On Prem Path to copy the file Dev:dev QA:qa&apos;)        string(name: &apos;Fallback_Blob_URL_for_binary_download&apos;, defaultValue: &apos;https://msmkdmapdisks.blob.core.windows.net&apos;, description: &apos;Enter the fallback blob URL to download binaries from&apos;)        choice(name: &apos;Run_RestAssured_Test_Cases&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run RestAssured pipeline once this build is successful.&apos;)        string(name: &apos;RestAssured_Ip&apos;, defaultValue: &apos;localhost&apos;, description: &apos;Enter the IP&apos;)        string(name: &apos;RestAssured_Port&apos;, defaultValue: &apos;5004&apos;, description: &apos;Enter the Port&apos;)        string(name: &apos;RestAssured_Docker_Image&apos;, defaultValue: &apos;ngdmapo/dmap_db_dev:v9.0.0.0&apos;, description: &apos;Enter the Docker_Image&apos;)        choice(name: &apos;Run_Modular_Test_Cases&apos;, choices: [&apos;No&apos;, &apos;Yes&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run ModulerTest pipeline once this build is successful.&apos;)        string(name: &apos;Modular_Ip&apos;, defaultValue: &apos;localhost&apos;, description: &apos;Enter the IP&apos;)        string(name: &apos;Modular_Port&apos;, defaultValue: &apos;5003&apos;, description: &apos;Enter the Port&apos;)        string(name: &apos;Modular_Docker_Image&apos;, defaultValue: &apos;ngdmapo/dmap_db_dev:v9.0.0.0&apos;, description: &apos;Enter the Docker_Image&apos;)		choice(name: &apos;Run_Selenium_Suite&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run Selenium suite pipeline once this build is successful.&apos;)		string(name: &apos;Selenium_branch&apos;, defaultValue: &apos;Development&apos;, description: &apos;Enter the name of the selenium branch.&apos;)		string(name: &apos;Master_Node_IP_Address&apos;, defaultValue: &apos;192.168.1.47&apos;, description: &apos;Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.&apos;)		string(name: &apos;Worker_Node_IP_Address&apos;, defaultValue: &apos;192.168.1.47&apos;, description: &apos;Please Enter the DMAP Worker Node IP Address of the server on which DMAP is running.&apos;)		string(name: &apos;DB_Podman_Image&apos;, defaultValue: &apos;quay.io/newtglobaldev/ngdmapo/dmap_db_dev:v9.0.0.0&apos;, description: &apos;Enter podman image name in which DMAP DB is running&apos;)		string(name: &apos;APP_Podman_Image&apos;, defaultValue: &apos;quay.io/newtglobaldev/ngdmapo/dmap_app_dev:v9.0.0.0&apos;, description: &apos;Enter podman image name in which DMAP APP is running&apos;)		string(name: &apos;Release_Version&apos;, defaultValue: &apos;8.1.4.3 | 8.3.4.0&apos;, description: &apos;Please specify the DMAP build version&apos;)		choice(name: &apos;On_Prem_DMAP_Instance&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.&apos;)		choice(name: &apos;Selenium_Suite_Name&apos;, choices: [&apos;Sanity&apos;, &apos;E2E&apos;, &apos;Regression&apos;], description: &apos;Please specify the selenium suite name&apos;)		string(name: &apos;DMAP_License_Key&apos;, defaultValue: &apos;946374-20A8BE-4E2D8D-B47F5E-FC1506-B4C3E7&apos;, description: &apos;Please specify the DMAP License Key for Activation&apos;)		choice(name: &apos;MigrationType&apos;, choices: [&apos;DB Migration&apos;, &apos;App Migration&apos;], description: &apos;Please specify Migration Type: App Migration or DB Migration&apos;)    }		options {        timestamps()        timeout(time: 12, unit: &apos;HOURS&apos;)        buildDiscarder(logRotator(numToKeepStr: &apos;10&apos;))    }		stages {	    		stage (&quot;Checkout Code&quot;) {			steps {			    deleteDir()			    dir(&quot;UI&quot;){			        deleteDir()				    echo &quot;Checkout the UI code&quot;				    //git branch: &quot;${params.UI_branch}&quot;, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAPP.git&apos;				    withCredentials([usernamePassword(credentialsId: &apos;Kavya_1709&apos;, usernameVariable: &apos;GIT_USERNAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;)]) {					sh &quot;&quot;&quot;						git clone --depth 5 -b ${params.UI_branch} https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/newtglobalgit/DMAPP.git .					   &quot;&quot;&quot;					}			    }			    dir(&quot;Backend&quot;){			        deleteDir()				    echo &quot;Checkout the Backend code&quot;				    //git branch: &quot;${params.Backend_branch}&quot;, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_Backend.git&apos;				    withCredentials([usernamePassword(credentialsId: &apos;Kavya_1709&apos;, usernameVariable: &apos;GIT_USERNAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;)]) {					sh &quot;&quot;&quot;						git clone --depth 5 -b ${params.Backend_branch} https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/newtglobalgit/DMAP_Backend.git .						&quot;&quot;&quot;					}			    }			    /*				dir(&quot;API&quot;){			        deleteDir()					echo &quot;Checkout the code&quot;					git branch: &quot;QA_Automation&quot;, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_API_INTEGRATION_TEST.git&apos;			    }			    */			}		}		        stage (&quot;Sonar Analysis&quot;) {    			steps{    			    echo &quot;Backend sonar Analysis&quot;    			    dir(&quot;Backend&quot;){    			         sh &quot;sonar-scanner \        				-Dsonar.projectKey=dmap_backend \        				-Dsonar.projectName=dmap_backend \        				-Dsonar.sources=. \        				-Dsonar.host.url=http://192.168.3.119:9000/sonarqube\        				-Dsonar.login=25534cb4ff60d377ca72aefd244d70eff8bfcf56&quot;    			    }    			    echo &quot;UI sonar Analysis&quot;    			     dir(&quot;UI&quot;){    			         sh &quot;npm install&quot;    			        sh &quot;sonar-scanner \        				-Dsonar.projectKey=dmap_UI \        				-Dsonar.projectName=dmap_UI \        				-Dsonar.sources=src/ \        				-Dsonar.exclusions=node_modules/ \        				-Dsonar.host.url=http://192.168.3.119:9000/sonarqube \        				-Dsonar.login=25534cb4ff60d377ca72aefd244d70eff8bfcf56&quot;    			    }     			}    		}				stage (&quot;UI Tests&quot;){			steps{			    dir(&quot;UI&quot;){				    echo &quot;Started Snyk Tests&quot;				    sh &quot;npm install&quot;				    snykSecurity failOnIssues: false, snykInstallation: &apos;SnykV2PluginTest&apos;, snykTokenId: &apos;Snyk_API&apos;									echo &quot;Running Sonar Analysis&quot;				    //sh &quot;cd SonarQube; node sonar.ts 192.168.3.148 9000/sonarqube ${params.sonarTypes} ${params.sonarSeverities} | tee output.log&quot;										//sh &quot;mv SonarQube/sonarAnalysis.html SonarQube/UISonarQualityGateCheck.html&quot;										sh &quot;mv UI_snyk_report.html UISnykReport.html&quot;						//		    sh &apos;! grep &quot;SonarQube Failed&quot; SonarQube/output.log&apos;													   // publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: &apos;SonarQube&apos;, reportFiles: &apos;UISonarQualityGateCheck.html&apos;, reportName: &apos;UI SonarQube Analysis Result&apos;, reportTitles: &apos;SonarQube Result&apos;])				    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;UISnykReport.html&apos;, reportName: &apos;Snyk Result&apos;, reportTitles: &apos;Snyk Result&apos;])			    }			}		}				stage (&quot;UI Build&quot;) {			steps {			    dir(&quot;UI&quot;){				    echo &quot;Building the UI code&quot;				    sh &quot;npm install&quot;				    sh &quot;ng build --configuration production --base-href=/DMAP/&quot;				    dir(&quot;dist&quot;){				        sh &quot;tar -cvf DMAP.tar DMAP/&quot;				        sh &quot;cp DMAP.tar ../..&quot;				    }				     				    			    }			}		}				stage (&quot;Backend Tests&quot;) {			steps {			    echo &quot;Running Bandit&quot;			    dir(&quot;Backend&quot;) {					echo &quot;Running Bandit&quot;					sh &quot;bandit -r ./ -x ./Deploy -ll -f csv -o PythonBanditAnalysisReport.csv || true&quot;										echo &quot;Running Sonar Analysis&quot;					sh &quot;cd SonarQube; python TestSonar.py -I 192.168.3.119 -P 9000/sonarqube -T ${params.sonarTypes} -S ${params.sonarSeverities} | tee output.log&quot;										sh &quot;mv SonarQube/sonarAnalysis.html SonarQube/BackendSonarQualityGateCheck.html&quot;										echo &quot;Running pytest and coverage&quot;					sh &quot;cd Tests; pytest Test.py&quot;															sh &quot;mv Tests/htmlcov/index.html Tests/htmlcov/ConstructTestCoverageReport.html&quot;					sh &quot;mv Tests/summary.html Tests/ConstructTestOutput.html&quot;														publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;PythonBanditAnalysisReport.csv&apos;, reportName: &apos;Bandit Security Report&apos;, reportTitles: &apos;Bandit Security Report&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\Tests&apos;, reportFiles: &apos;ConstructTestOutput.html&apos;, reportName: &apos;Construct PyTest Result&apos;, reportTitles: &apos;Construct PyTest Result&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\Tests\\htmlcov&apos;, reportFiles: &apos;ConstructTestCoverageReport.html&apos;, reportName: &apos;Construct Coverage Result&apos;, reportTitles: &apos;Construct Coverage Result&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;BackendSonarQualityGateCheck.html&apos;, reportName: &apos;Backend SonarQube Analysis Result&apos;, reportTitles: &apos;Backend SonarQube Analysis Result&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;Backend_Sonar_Issues.xlsx&apos;, reportName: &apos;Sonar Backend Excel Report&apos;, reportTitles: &apos;Sonar Backend Excel Report&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;Frontend_Sonar_Issues.xlsx&apos;, reportName: &apos;Sonar Frontend Excel Result&apos;, reportTitles: &apos;Sonar Frontend Excel Result&apos;])				}			}		}				stage (&quot;Backend Build&quot;) {			steps {				echo &quot;---------------------Creating build container---------------------------&quot;				sh &quot;docker images&quot;				withCredentials([string(credentialsId: &apos;GIT_User&apos;, variable: &apos;GITUser&apos;),string(credentialsId: &apos;Git_New_PAT&apos;, variable: &apos;Password&apos;)]) {                    sh &quot;docker run -d -it -e GIT_USER=${GITUser} -e GIT_PASS=${Password} -e GIT_BRANCH=${params.Backend_branch} -e LICENSE_REQUIRED=${params.License_Required} --name=${params.Container_Name} ${params.Build_Image}&quot;                }				echo &quot;---------------------Completed creating build container---------------------------&quot;			    dir(&quot;Backend&quot;) {					echo &quot;------------------Build container created-------------------------------&quot;					sh &quot;docker ps -a&quot;					sh &quot;docker cp BuildScript/make_backend.sh ${params.Container_Name}:/usr/local/tomcat&quot;					echo &quot;------------Copied build scipt inside build container------------------&quot;					sh &quot;docker exec ${params.Container_Name} sh /usr/local/tomcat/make_backend.sh&quot;					echo &quot;----------------------------Binaries created-------------------------------&quot;					sh &quot;docker cp ${params.Container_Name}:/usr/local/tomcat/DMAP_Backend/dist/Service.tar .&quot;					echo &quot;------------------------Copied binaries in Jenkins----------------------&quot;					sh &quot;cp Service.tar ../&quot;			    }				echo &quot;------------------Removing Build container ------------------&quot;				sh &quot;docker stop ${params.Container_Name}&quot;			    sh &quot;docker rm -f ${params.Container_Name}&quot;			    echo &quot;------------------Build container removed successfully------------------&quot;			 }		}				stage (&quot;Package Binary&quot;) {			steps {			    echo &quot;------------------Package Binary------------------&quot;			    script {			      def now = new Date()			      def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))			      writeFile(file: &apos;dmap_release.yaml&apos;, text:&quot;product_name: DMAP\nbinary_version: ${params.Service_pack_version}\nminimal_supported_image_version: ${params.Minimal_dmap_image_version}\ndate_published: ${time}\nbuild_type: ${params.Build_Type}&quot;)			      sh &quot;tar cvf dmap_release.tar DMAP.tar Service.tar dmap_release.yaml&quot;			    }			}		}		stage (&quot;Blob Storage Upload&quot;){		    when {                expression { params.Storage_location == &quot;Azure_Blob&quot; }            }			steps {				echo &quot;---------------Deploying Artifacts to Blob Storage--------------&quot;				script {				    echo &quot;Azure Blob Service Pack&quot;				    def now = new Date()			        def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))										sh &quot;echo \$(md5sum dmap_release.tar | cut -d &apos; &apos; -f1) &gt;&gt; dmap_tar_checksum.txt&quot;								        sh &quot;echo \$(stat -c \&quot;%n,%s\&quot; dmap_release.tar | column -s, | cut -d &apos;,&apos; -f2) &gt;&gt; dmap_tar_filesize.txt&quot;								        def md5sum = readFile(file: &apos;dmap_tar_checksum.txt&apos;)			        def filesize = readFile(file: &apos;dmap_tar_filesize.txt&apos;)										sh &quot;rm -rf dmap_tar_checksum.txt&quot;			        sh &quot;rm -rf dmap_tar_filesize.txt&quot;								        writeFile(file: &apos;dmap_latest_release_info.yaml&apos;, text:&quot;product_name: DMAP\nlatest_image_version: ${params.Latest_dmap_image_version}\nlatest_binary_version: ${params.Service_pack_version}\nChange_in_binary_for: ${params.Change_in_binary_for}\nminimal_supported_image_version: ${params.Minimal_dmap_image_version}\ndate_published: ${time}\nchecksum: ${md5sum}filesize: ${filesize}url_to_download_dmap_binary: https://msmkdmapdisks.blob.core.windows.net/${params.Blob_Storage}/&quot;)				}								withCredentials([string(credentialsId: &apos;BlobAccountKey&apos;, variable: &apos;BlobAccountKey&apos;)]) {				    sh &quot;az storage blob upload --account-name msmkdmapdisks --account-key ${BlobAccountKey} --container-name ${params.Blob_Storage} --overwrite --file dmap_release.tar --name dmap_release.tar&quot;                    sh &quot;az storage blob upload --account-name msmkdmapdisks --account-key ${BlobAccountKey} --container-name ${params.Blob_Storage} --overwrite --file dmap_latest_release_info.yaml --name dmap_latest_release_info.yaml&quot;                }			}		}		stage (&quot;On-Prem Upload&quot;){		    when {                expression { params.Build_Type == &quot;Dev&quot; || params.Build_Type == &quot;QA&quot; }            }			steps {				echo &quot;---------------Copying artifacts to file path--------------&quot;				sh &quot;cp dmap_release.tar /var/www/html/${params.OnPrem_Path}/&quot;				sh &quot;rm -rf dmap_latest_release_info.yaml&quot;								script{				    def now = new Date()			        def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))			        sh &quot;echo \$(md5sum dmap_release.tar | cut -d &apos; &apos; -f1) &gt;&gt; dmap_tar_checksum.txt&quot;								        sh &quot;echo \$(stat -c \&quot;%n,%s\&quot; dmap_release.tar | column -s, | cut -d &apos;,&apos; -f2) &gt;&gt; dmap_tar_filesize.txt&quot;								        def md5sum = readFile(file: &apos;dmap_tar_checksum.txt&apos;)			        def filesize = readFile(file: &apos;dmap_tar_filesize.txt&apos;)										sh &quot;rm -rf dmap_tar_checksum.txt&quot;			        sh &quot;rm -rf dmap_tar_filesize.txt&quot;        		    writeFile(file: &apos;dmap_latest_release_info.yaml&apos;, text:&quot;product_name: DMAP\nlatest_image_version: ${params.Latest_dmap_image_version}\nlatest_binary_version: ${params.Service_pack_version}\nChange_in_binary_for: ${params.Change_in_binary_for}\nminimal_supported_image_version: ${params.Minimal_dmap_image_version}\ndate_published: ${time}\nchecksum: ${md5sum}filesize: ${filesize}fallback_blob_url_to_download_dmap_binary: ${params.Fallback_Blob_URL_for_binary_download}/${params.Blob_Storage}\nurl_to_download_dmap_binary: ${params.VM_URL_for_binary_download}/${params.OnPrem_Path}/&quot;)    				        				sh &quot;cp dmap_latest_release_info.yaml /var/www/html/${params.OnPrem_Path}/&quot; 				}			}		}	}		post {        always {            emailext attachmentsPattern: &apos;UI/UISnykReport.html,Backend/Tests/htmlcov/ConstructTestCoverageReport.html,Backend/Tests/ConstructTestOutput.html,Backend/PythonBanditAnalysisReport.csv, Backend/SonarQube/BackendSonarQualityGateCheck.html,Backend/SonarQube/Frontend_Sonar_Issues.xlsx,Backend/SonarQube/Backend_Sonar_Issues.xlsx&apos;,            //emailext attachmentsPattern: &apos;UI/UISnykReport.html,Backend/Tests/htmlcov/ConstructTestCoverageReport.html,Backend/PythonBanditAnalysisReport.csv, Backend/SonarQube/BackendSonarQualityGateCheck.html,Backend/SonarQube/Frontend_Sonar_Issues.xlsx,Backend/SonarQube/Backend_Sonar_Issues.xlsx&apos;,            //emailext attachmentsPattern: &apos;UI/UISnykReport.html&apos;,             subject: &quot;Jenkins Job Report For ${BUILD_NAME} - ${currentBuild.currentResult}&quot;,			body: &quot;BUILD DETAILS: ${BUILD_DETAILS} &lt;BR&gt; BUILD STATUS: ${currentBuild.currentResult} &lt;BR&gt; BUILD TYPE: ${params.Build_Type} &lt;BR&gt; BUILD VERSION: ${params.Service_pack_version}&quot;,			to: &quot;${NOTIFYUSERS}&quot;        }        success {            script {                if (params[&apos;Run_RestAssured_Test_Cases&apos;] == &apos;Yes&apos;) {                    echo &quot;Going to start Rest Assured Test case pipeline&quot;                    // Triggering additional builds after the current build is successful                    build job: &apos;4_DB_Restassured_Test_Cases&apos;, parameters: [string(name: &apos;Ip&apos;, value: params[&apos;RestAssured_Ip&apos;]),string(name: &apos;PORT&apos;, value: params[&apos;RestAssured_Port&apos;]),string(name: &apos;Docker_Image&apos;, value: params[&apos;RestAssured_Docker_Image&apos;])], wait: false                }                if (params[&apos;Run_Modular_Test_Cases&apos;] == &apos;Yes&apos;)  {                    echo &quot;Going to start Modular Test case pipeline&quot;                    // Triggering additional builds after the current build is successful                    build job: &apos;5_DB_MODULARTEST&apos;, parameters: [string(name: &apos;Ip&apos;, value: params[&apos;Modular_Ip&apos;]),string(name: &apos;PORT&apos;, value: params[&apos;Modular_Port&apos;]),string(name: &apos;Docker_Image&apos;, value: params[&apos;Modular_Docker_Image&apos;])], wait: false                }				if ((params[&apos;Build_Type&apos;] == &apos;QA&apos; || params[&apos;Build_Type&apos;] == &apos;Prod&apos;) &amp;&amp; params[&apos;Run_Selenium_Suite&apos;] == &apos;Yes&apos;)  {					echo &quot;Going to start Selenium testsuite pipeline&quot;					// Triggering additional builds after the current build is successful					build job: &apos;8_Podman_Selenium_Test_Suite&apos;,					parameters: [						string(name: &apos;Selenium_branch&apos;, value: &quot;${params.Selenium_branch}&quot;),						string(name: &apos;Master_Node_IP_Address&apos;, value: &quot;${params.Master_Node_IP_Address}&quot;),						string(name: &apos;Worker_Node_IP_Address&apos;, value: &quot;${params.Worker_Node_IP_Address}&quot;), 						string(name: &apos;DB_Podman_Image&apos;, value: &quot;${params.DB_Podman_Image}&quot;),						string(name: &apos;APP_Podman_Image&apos;, value: &quot;${params.APP_Podman_Image}&quot;),						string(name: &apos;Release_Version&apos;, value: &quot;${params.Release_Version}&quot;),						string(name: &apos;On_Prem_DMAP_Instance&apos;, value: &quot;${params.On_Prem_DMAP_Instance}&quot;),						string(name: &apos;Selenium_Suite_Name&apos;, value: &quot;${params.Selenium_Suite_Name}&quot;),						string(name: &apos;BuildType&apos;, value: &quot;${params.Build_Type}&quot;),						string(name: &apos;DMAP_License_Key&apos;, value: &quot;${params.DMAP_License_Key}&quot;),						string(name: &apos;MigrationType&apos;, value: &quot;${params.MigrationType}&quot;)					],					wait: false				}            }        }    }}</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>