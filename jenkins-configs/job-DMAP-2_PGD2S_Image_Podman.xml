<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>podman_image_version</string>        <string>podman_image</string>        <string>service_pack_location</string>        <string>service_pack_version</string>        <string>podman_branch</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description/>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.ChoiceParameterDefinition>          <name>podman_image</name>          <description>Select Podman Image name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>pgd2s_azure_blob_docker_dev</string>              <string>pgd2s_azure_blob_docker_qa</string>              <string>pgd2s_azure_blob_docker_prod</string>              <string>pgd2s_aws_s3_docker_prod</string>              <string>pgd2s_aws_s3_docker_dev</string>              <string>pgd2s_aws_s3_docker_qa</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>podman_branch</name>          <description>Enter git branch to pull podman files</description>          <defaultValue>test_license</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>podman_image_version</name>          <description>Enter the Podman Image version</description>          <defaultValue>v0.0.0.1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>service_pack_version</name>          <description>Enter service pack version</description>          <defaultValue>0.0.0.1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>service_pack_location</name>          <description>Enter service pack location (S3/BLOB). It should be full path</description>          <defaultValue>https://msmkdmapdisks.blob.core.windows.net/pgd2sdevreleases/</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>2_PGD2S_Image_Podman/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline { 	  agent {        node {            label 'build_slave_day2_centos'        }    }	environment {		APPLICATION_NAME = "Build_Podman_Image"		NOTIFYUSERS = 'pgd2s-devteam@newtglobalcorp.com'		BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"	}    parameters {	    choice(name: 'podman_image', choices: ['pgd2s_azure_blob_docker_dev','pgd2s_azure_blob_docker_qa','pgd2s_azure_blob_docker_prod','pgd2s_aws_s3_docker_prod','pgd2s_aws_s3_docker_dev', 'pgd2s_aws_s3_docker_qa'], description: 'Select Podman Image name')	    string(name: 'podman_branch', defaultValue: 'test_license', description: 'Enter git branch to pull podman files')        string(name: 'podman_image_version', defaultValue: 'v0.0.0.1', description: 'Enter the Podman Image version')        string(name: 'service_pack_version', defaultValue: '0.0.0.1', description: 'Enter service pack version')        string(name: 'service_pack_location', defaultValue: 'https://msmkdmapdisks.blob.core.windows.net/pgd2sdevreleases/', description: 'Enter service pack location (S3/BLOB). It should be full path')    } 	options {        timestamps()        timeout(time: 5, unit: 'HOURS')        buildDiscarder(logRotator(numToKeepStr: '10'))    }	stages {	    stage ("Checkout") {			steps {			    deleteDir()				echo "Checkout the code"				git branch: "${params.podman_branch}", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/Day2_Docker_Linux.git'			}		}    	stage ("Podman Build") {    		steps {    		    script {    		    writeFile(file: 'pgd2s_image_release.yaml', text:"name: DMAP\nimage_version: ${params.podman_image_version}\ninitial_service_pack_version: ${params.service_pack_version}\n")			    if(params.podman_image == "pgd2s_aws_s3_dev" || params.podman_image == "pgd2s_aws_s3_qa" || params.podman_image == "pgd2s_aws_s3_prod"){			        echo "Build AWS Podman Image"                    sh """                    sed -i -e 's#service_pack_location#${params.service_pack_location}#' docker_dmap_aws                    """    			    sh "podman build -t docker.io/ngdmapo/${params.podman_image}:${params.podman_image_version} -f docker_dmap_aws ."    			    sh "podman images"			    }			    else if(params.podman_image == "pgd2s_azure_blob_docker_prod" || params.podman_image == "pgd2s_azure_blob_docker_dev" || params.podman_image == "pgd2s_azure_blob_docker_qa" || params.podman_image =="pgd2s_vulnerabilities_fixes" || params.podman_image =="dmap_developer" || params.podman_image =="dmap_azure_blob_dev_proxy"){			        echo "Podman Azure Blob"			        writeFile(file: 'pgd2s_image_release.yaml', text:"name: DMAP\nimage_version: ${params.podman_image_version}\ninitial_service_pack_version: ${params.service_pack_version}\n")			        echo "Build Azure Podman Image"    			    sh """                    sed -i -e 's#service_pack_location#${params.service_pack_location}#' docker_dmap_azure                    """    			    sh "podman build -t docker.io/ngdmapo/${params.podman_image}:${params.podman_image_version} -f docker_dmap_azure ."			    }			    else if(params.podman_image == "dmap_developer"){			        echo "Podman Azure Developer Image"			        writeFile(file: 'pgd2s_image_release.yaml', text:"name: DMAP\nimage_version: ${params.podman_image_version}\ninitial_service_pack_version: ${params.service_pack_version}\n")			        //echo "Build Azure Podman Image"    			    //sh """                    //sed -i -e 's#service_pack_location#${params.service_pack_location}#' docker_dmap_azure                    //"""    			    sh "podman build -t docker.io/ngdmapo/${params.podman_image}:${params.podman_image_version} -f docker_dmap_developer ."			    }			     sh "podman images"			    }    		}    	} 	    stage ("Podman Push") {    		steps {    		   script{    		        echo "Push podman Image"    			   withCredentials([usernamePassword(credentialsId: 'DockerHubCred', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {                        sh "podman login docker.io -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"    			        sh "podman tag ngdmapo/${podman_image}:${podman_image_version} ngdmapo/${podman_image}:latest"    			        sh "podman push ngdmapo/${podman_image}:${podman_image_version}"    			        sh "podman push ngdmapo/${podman_image}:latest"    			    }    			    }    	    }	    }	    stage ("Remove Podman Image") {    		steps {    			    echo "Remove Podman Image"    			    sh "podman rmi ngdmapo/${params.podman_image}:${podman_image_version}"    		}    	}	}	post {        always {            emailext attachmentsPattern: '',            subject: "Jenkins Job Report For ${APPLICATION_NAME} - ${currentBuild.currentResult}",			body: "BUILD DETAILS: ${BUILD_DETAILS}      BUILD STATUS: ${currentBuild.currentResult}",			to: "${NOTIFYUSERS}"        }    }}</script></flow-definition>