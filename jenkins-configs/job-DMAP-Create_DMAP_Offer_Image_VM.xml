<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties/>      <triggers/>      <parameters>        <string>Terraform_Branch</string>        <string>GCP_Image_Name</string>        <string>Create_VM_for_Platform</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description/>  <keepDependencies>false</keepDependencies>  <properties>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Terraform_Branch</name>          <description>Enter branch of terraform repository.</description>          <defaultValue>test</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Create_VM_for_Platform</name>          <description>Please select the platform to execute selenium tests.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Azure</string>              <string>GCP</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Azure_DMAP_Image_Version</name>          <description>Enter Azure DMAP Image Version.</description>          <defaultValue>latest</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>GCP_Image_Name</name>          <description>Enter GCP image name xto create a VM in GCP.</description>          <defaultValue>projects/newt-global-dmap/global/images/dmap-image-080102</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>Create_DMAP_Offer_Image_VM/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline{    agent {        node {            label 'build_slave'        }    }    environment {		BUILD_NAME = "Create DMAP Offer Image VM"		NOTIFYUSERS = 'dmap_dev@newtglobalcorp.com'		BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"	}        parameters {        string(name: 'Terraform_Branch', defaultValue: 'test', description: 'Enter branch of terraform repository.')        choice(name: 'Create_VM_for_Platform', choices: ['Azure', 'GCP'], description: 'Please select the platform to execute selenium tests.')        string(name: 'Azure_DMAP_Image_Version', defaultValue: 'latest', description: 'Enter Azure DMAP Image Version.')        string(name: 'GCP_Image_Name', defaultValue: 'projects/newt-global-dmap/global/images/dmap-image-080102', description: 'Enter GCP image name xto create a VM in GCP.')    }        stages {        stage('Clone Terraform Repo') {            steps {                script {                    if (params.Create_VM_for_Platform == "Azure") {                        echo "Creating Azure Terraform Directory"                        dir("Azure_Terraform") {                            echo "------------------------Checkout Starts --------------------------------"                            sh "pwd"                            git branch: "${params.Terraform_Branch}", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/Azure_VM_Offer_terraform.git'                            echo "------------------------ Checkout Completed --------------------------------"                        }                    } else if (params.Create_VM_for_Platform == "GCP") {                        echo "Creating GCP Terraform Directory"                        dir("GCP_Terraform") {                            echo "------------------------Checkout Starts --------------------------------"                            sh "pwd"                            git branch: "${params.Terraform_Branch}", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/GCP_VMOFFER_Terraform.git'                            echo "------------------------ Checkout Completed --------------------------------"                        }                    }                }            }        }        stage('Login to Azure') {            when {                expression {                    return params.Create_VM_for_Platform == 'Azure'                }            }            steps {                sh '''                    az login  --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID                    az account set --subscription $AZURE_SUBSCRIPTION_ID                    '''            }			script {				env.TF_VAR_vm_image_version = "${params.Azure_DMAP_Image_Version}"			}        }        stage('Login to GCP') {            when {                expression {                    return params.Create_VM_for_Platform == 'GCP'                }            }            steps {                withCredentials([file(credentialsId: 'Azure_Creds', variable: 'GOOGLE_CREDENTIALS_FILE')]) {                     dir('GCP_Terraform') {                    sh 'cp ${GOOGLE_CREDENTIALS_FILE} gcp-vmoffer.json'                     }                }                sh '''                    gcloud auth activate-service-account --key-file="gcp-vmoffer.json"                    gcloud config set project newt-global-dmap                '''                script {                    env.TF_VAR_custom_image = "${params.GCP_Image_Name}"                }            }        }        stage('Initialize and Apply Terraform to Create VM') {            steps {                script {                    if (params.Create_VM_for_Platform == "Azure") {                        dir('Azure_Terraform') {                            script {                                sh '''                                    pwd                                                                         export ARM_SUBSCRIPTION_ID="$AZURE_SUBSCRIPTION_ID"                                    export ARM_CLIENT_ID="$AZURE_CLIENT_ID"                                    export ARM_CLIENT_SECRET="$AZURE_CLIENT_SECRET"                                    export ARM_TENANT_ID="$AZURE_TENANT_ID"                                                                        terraform init -upgrade                                    terraform apply -auto-approve                                '''                            }                        }                    } else if (params.Create_VM_for_Platform == "GCP") {                        dir('GCP_Terraform') {                            script {                                sh """                                    export GOOGLE_APPLICATION_CREDENTIALS="gcp-vmoffer.json"                                                                        terraform init -upgrade                                    terraform apply -auto-approve                                """                            }                        }                    }                }            }        }    }        post {        success {            emailext(                subject: "Jenkins Job Report For ${BUILD_NAME} - SUCCESS",                body: "BUILD DETAILS: ${BUILD_DETAILS}      BUILD STATUS: SUCCESS",                to: "${NOTIFYUSERS}"            )            script {                def public_ip_address = ""                // Fetch the Public IP of the created VM                if (params.Create_VM_for_Platform == "Azure") {                    dir("Azure_Terraform") {                        echo "Going to fetch Public IP of the created Azure VM."                        public_ip_address = sh(script: 'terraform output -raw public_ip_address', returnStdout: true).trim()                        echo "Public IP: ${public_ip_address}"                    }                } else if (params.Create_VM_for_Platform == "GCP") {                    dir("GCP_Terraform") {                        echo "Going to fetch Public IP of the created GCP VM."                        public_ip_address = sh(script: 'terraform output -raw public_ip_address', returnStdout: true).trim()                        echo "Public IP: ${public_ip_address}"                    }                }                                if (!public_ip_address) {                    echo "Failed to get the public IP of the VM"                }                echo "Going to start Selenium pipeline."                // Triggering additional builds after the current build is successful                build job: 'VM_Offer_Selenium_Test_Suite', parameters: [string(name: 'Master_Node_IP_Address', value: public_ip_address)], wait: false            }        }        failure {            emailext(                subject: "Jenkins Job Report For ${BUILD_NAME} - FAILURE",                body: "BUILD STATUS: FAILURE",                to: "${NOTIFYUSERS}"            )        }    }}</script></flow-definition>