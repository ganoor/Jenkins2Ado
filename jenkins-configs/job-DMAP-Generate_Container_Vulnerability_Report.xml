<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties/>      <triggers/>      <parameters>        <string>ACR_Name</string>        <string>Image_Version</string>        <string>ACR_Subscription_ID</string>        <string>Image_Name</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description/>  <keepDependencies>false</keepDependencies>  <properties>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>ACR_Name</name>          <description>Enter azure container registry name where you want to push your image.</description>          <defaultValue>dmapprod</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Image_Name</name>          <description>Enter image name for which you want to generate the vulnerability report.</description>          <defaultValue>ngdmapo/dmap_azure_blob_dev</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Image_Version</name>          <description>Enter image version.</description>          <defaultValue>v8.1.4.3</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>ACR_Subscription_ID</name>          <description>Enter Azure Container Registry Subscription ID to configure expected ACR.</description>          <defaultValue>b83326f1-b625-4cbc-b5c3-c2f240c6665d</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>Generate_Container_Vulnerability_Report/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline{    agent {        node {            label 'build_slave'        }    }    environment {		BUILD_NAME = "Generate Container Vulnerability Report"		NOTIFYUSERS = 'dmap_dev@newtglobalcorp.com'		BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"		AZURE = credentials('azure_5k_subscription')	}        parameters {        string(name: 'ACR_Name', defaultValue: 'dmapprod', description: 'Enter azure container registry name where you want to push your image.')        string(name: 'Image_Name', defaultValue: 'ngdmapo/dmap_azure_blob_dev', description: 'Enter image name for which you want to generate the vulnerability report.')        string(name: 'Image_Version', defaultValue: 'v8.1.4.3', description: 'Enter image version.')        string(name: 'ACR_Subscription_ID', defaultValue: 'b83326f1-b625-4cbc-b5c3-c2f240c6665d', description: 'Enter Azure Container Registry Subscription ID to configure expected ACR.')    }        stages {        stage('Azure Login and Publish Image to Container Registry') {            steps {                // Login to Azure Container Registry (ACR)                sh '''                    az login  --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID                    az account set --subscription ${ACR_Subscription_ID}                    az account show --subscription ${ACR_Subscription_ID}                    az acr login --name ${ACR_Name}                '''                // Tag and push the Docker image to ACR                withCredentials([usernamePassword(credentialsId: 'Azure_Docker_Creds', usernameVariable: 'ACR_USERNAME', passwordVariable: 'ACR_PASSWORD')]) {				    sh('echo "$ACR_PASSWORD" | docker login ${ACR_Name}.azurecr.io -u $ACR_USERNAME --password-stdin')				}                sh '''                    docker pull ${Image_Name}:${Image_Version}                    docker tag ${Image_Name}:${Image_Version} ${ACR_Name}.azurecr.io/${Image_Name}:${Image_Version}                    docker push ${ACR_Name}.azurecr.io/${Image_Name}:${Image_Version}                '''            }        }        stage('Convert Vulnerability Report to JSON') {            steps {                script {                    def queryvar = """                        securityresources                         | where type == "microsoft.security/assessments/subassessments"                        | where id startswith "/subscriptions/${ACR_Subscription_ID}/resourceGroups/DMAPIND/providers/Microsoft.ContainerRegistry/registries/${ACR_Name}/providers/Microsoft.Security/assessments/c0b7cfc6-3172-465a-b378-53c7ff2cc0d5"                        | where tostring(properties.id) != ""                        | extend severity=(// SubassessmentsQueryBuilder.columnDefinitions.severity                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.status.severity), dynamic(null)))                        | extend severitySort = iff(severity == "Critical", 4, iff (severity == "High", 3, iff(severity == "Medium", 2, iff(severity == "Low", 1, 0))))                        | extend assessmentKey=(// SubassessmentsQueryBuilder.columnDefinitions.assessmentKey                                iff(type == "microsoft.security/assessments/subassessments", tostring(split(tostring(split(id, "/providers/Microsoft.Security/assessments/", 1)[0]), "/", 0)[0]), dynamic(null))), subAssessmentId=(// SubassessmentsQueryBuilder.columnDefinitions.id                                iff(type == "microsoft.security/assessments/subassessments", id, dynamic(null)))                        | extend subAssessmentName=(// SubassessmentsQueryBuilder.columnDefinitions.displayName                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.displayName), dynamic(null))),                            description=(// SubassessmentsQueryBuilder.columnDefinitions.description                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.description), dynamic(null))),                            remediation=(// SubassessmentsQueryBuilder.columnDefinitions.remediation                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.remediation), dynamic(null))),                            category=(// SubassessmentsQueryBuilder.columnDefinitions.category                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.category), dynamic(null))),                            impact=(// SubassessmentsQueryBuilder.columnDefinitions.impact                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.impact), dynamic(null))),                            status=(// SubassessmentsQueryBuilder.columnDefinitions.statusCode                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.status.code), dynamic(null))),                            cause=(// SubassessmentsQueryBuilder.columnDefinitions.statusCause                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.status.cause), dynamic(null))),                            statusDescription=(// SubassessmentsQueryBuilder.columnDefinitions.statusDescription                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.status.description), dynamic(null))),                            resourceDetails=(// SubassessmentsQueryBuilder.columnDefinitions.resourceDetails                                iff(type == "microsoft.security/assessments/subassessments", tostring(properties.resourceDetails), dynamic(null))),                            timeGenerated=(// SubassessmentsQueryBuilder.columnDefinitions.timeGenerated                                iff(type == "microsoft.security/assessments/subassessments", todatetime(properties.timeGenerated), dynamic(null))),                            vulnerabilityType = tostring(properties.additionalData.type),                            patchable = properties.additionalData.patchable,                            publishedTime = properties.additionalData.publishedTime,                            cvssList = properties.additionalData.cvss,                            cveArray = properties.additionalData.cve,                            additionalData = properties.additionalData,                            vendorReferences = properties.additionalData.vendorReferences,                            propertyId = properties.id                         | project severitySort, category, resourceDetails, subAssessmentId, subAssessmentName, description, remediation, severity, status, vulnerabilityType, patchable, publishedTime, cvssList, cveArray, vendorReferences, timeGenerated, impact, additionalData, cause, statusDescription, propertyId                        | summarize severitySort=any(severitySort), category=any(category), resourceDetails=any(resourceDetails), description=any(description), subAssessmentName=any(subAssessmentName), remediation=any(remediation), severity=any(severity), status=any(status), vulnerabilityType=any(vulnerabilityType),                                patchable=any(patchable), publishedTime=any(publishedTime), cvssList=any(cvssList), vendorReferences=any(vendorReferences), propertyId=any(propertyId), timeGenerated=any(timeGenerated), impact=any(impact), additionalData=any(additionalData), cause=any(cause), statusDescription=any(statusDescription) by subAssessmentId                        | sort by severitySort desc                    """                    // Write the query to a temporary file                    writeFile file: 'query.txt', text: queryvar                    // Scan the Docker image in ACR for vulnerabilities using Azure Defender                    sh '''                        az graph query -q @query.txt --subscriptions ${ACR_Subscription_ID} --output json &gt; vulnerability-report.json                    '''                }            }        }                stage('Convert Vulnerability Report to Excel') {            steps {                script {                    // Python script to convert JSON report to Excel                    writeFile file: 'convert_to_excel.py', text: '''\import pandas as pdimport jsonimport csv# Load the JSON datawith open('vulnerability-report.json', 'r') as file:    data = json.load(file)# Check if 'data' exists and is non-emptyif 'data' in data and len(data['data']) &gt; 0:    first_entry = data['data'][0]    headers = list(first_entry.keys())  # Extract headers from the first entryelse:    # Fallback headers if 'data' is missing or empty    headers = ['additionalData', 'category', 'cause', 'cvssList', 'description', 'impact', 'patchable', 'propertyId', 'publishedTime', 'remediation',               'resourceDetails', 'severity', 'severitySort', 'status', 'statusDescription', 'subAssessmentId', 'subAssessmentName', 'timeGenerated',               'vendorReferences', 'vulnerabilityType']  # Replace these with your expected headers# Define the CSV file to be writtencsv_file = 'vulnerability-report.csv'# Open the CSV file in write modewith open(csv_file, mode='w', newline='', encoding='utf-8') as file:    csv_writer = csv.writer(file)        # Write the CSV headers    csv_writer.writerow(headers)        # If 'data' exists and is non-empty, write rows    if 'data' in data and len(data['data']) &gt; 0:        for entry in data['data']:            # Write the values of the current entry in the same order as the headers            row = [entry.get(header, '') for header in headers]            csv_writer.writerow(row)print(f"CSV file '{csv_file}' generated successfully!")'''                                        // Run the Python script to convert the report to Excel                    sh 'python3 convert_to_excel.py'                }            }        }    }        post {        always {            emailext attachmentsPattern: 'vulnerability-report.csv',             subject: "Jenkins Job Report For ${BUILD_NAME} - ${currentBuild.currentResult}",			body: "BUILD DETAILS: ${BUILD_DETAILS} &lt;BR&gt; BUILD STATUS: ${currentBuild.currentResult} &lt;BR&gt; IMAGE SCANNED: ${Image_Name}:${Image_Version}",			to: "${NOTIFYUSERS}"						// Clean up files after sending the email            script {                // Remove files that were created during the pipeline                sh '''                    if [ -f "query.txt" ]; then                        rm query.txt                    fi                    if [ -f "vulnerability-report.json" ]; then                        rm vulnerability-report.json                    fi                                        if [ -f "convert_to_excel.py" ]; then                        rm convert_to_excel.py                    fi                    if [ -f "vulnerability-report.csv" ]; then                        rm vulnerability-report.csv                    fi                    docker rmi ${Image_Name}:${Image_Version} -f                    docker rmi ${ACR_Name}.azurecr.io/${Image_Name}:${Image_Version} -f                '''            }        }    }}</script></flow-definition>