<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>App_Docker_Image</string>        <string>APP_Master_Port</string>        <string>Run_RestAssured_Test_Cases</string>        <string>Ip</string>        <string>MigrationType</string>        <string>Build_Image</string>        <string>Blob_Storage</string>        <string>Build_Type</string>        <string>APP_Podman_Image</string>        <string>Run_Modular_Test_Cases</string>        <string>Java_Backend</string>        <string>Flask_Backend_branch</string>        <string>Change_in_binary_for</string>        <string>Run_Selenium_Suite</string>        <string>BuildType</string>        <string>sonarSeverities</string>        <string>DB_Podman_Image</string>        <string>Fallback_Blob_URL_for_binary_download</string>        <string>Selenium_branch</string>        <string>Release_Version</string>        <string>DB_Port</string>        <string>APP_Worker_Port</string>        <string>APP_Docker_Image</string>        <string>Latest_dmap_image_version</string>        <string>Storage_Location</string>        <string>Selenium_Suite_Name</string>        <string>Service_pack_version</string>        <string>VM_URL_for_binary_download</string>        <string>On_Prem_DMAP_Instance</string>        <string>Server_IP_Address</string>        <string>Minimum_dmap_image_version</string>        <string>OnPrem_Path</string>        <string>Container_Name</string>        <string>DB_Docker_Image</string>        <string>sonarTypes</string>        <string>DMAP_License_Key</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>Job to Build the image and binary. push binary into docker hub and push the image into Azure registry.</description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Java_Backend</name>          <description>Enter the name of the Java Backend branch</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Flask_Backend_branch</name>          <description>Enter the name of the Backend branch</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Container_Name</name>          <description>Enter the name of the container in lower case, example: you can put your name</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Build_Image</name>          <description>Enter the name of the docker build image which will be used to build binaries</description>          <defaultValue>ngdmapo/app_build:v1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Service_pack_version</name>          <description>Enter the version of Service pack. Sample values will be like: 6.3.2.0</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Latest_dmap_image_version</name>          <description>Enter the latest version of DMAP image. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Minimum_dmap_image_version</name>          <description>Enter the Minimum version of DMAP DB image to run current binaries. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Change_in_binary_for</name>          <description>Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>App</string>              <string>DB</string>              <string>Both</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Storage_Location</name>          <description>Enter the storage location to store Service pack which is BLOB</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Azure_Blob</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>VM_URL_for_binary_download</name>          <description>Enter the On Prem VM URL to download binaries from</description>          <defaultValue>http://192.168.3.183/temp/app</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>OnPrem_Path</name>          <description>On Prem Path to copy the file Dev:dev QA:qa</description>          <defaultValue>dev</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Fallback_Blob_URL_for_binary_download</name>          <description>Enter the fallback blob URL to download binaries from</description>          <defaultValue>https://msmkdmapdisks.blob.core.windows.net</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Blob_Storage</name>          <description>Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapextndevreleases, qa: dmapextnqareleases, prod: dmapextnreleases</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarTypes</name>          <description>Enter the sonarQube issue types to certify the build</description>          <defaultValue>VULNERABILITY,BUG,CODE_SMELL</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarSeverities</name>          <description>Enter the sonarQube issue severities to certify the build</description>          <defaultValue>CRITICAL,BLOCKER,MAJOR</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Build_Type</name>          <description>Select build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Dev</string>              <string>QA</string>              <string>Prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_RestAssured_Test_Cases</name>          <description>Configure this parameter to Yes if you want to automatically run RestAssured pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Ip</name>          <description>Enter the ip of server in which DMAP backend is running</description>          <defaultValue>localhost</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Port</name>          <description>Enter the service port of server in which DMAP DB backend is running</description>          <defaultValue>7002</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Master_Port</name>          <description>Enter the serviece port of server in which DMAP APP backend is running</description>          <defaultValue>5001</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Worker_Port</name>          <description>Enter the serviece port of server in which DMAP APP backend is running</description>          <defaultValue>5005</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Docker_Image</name>          <description>Enter the docker image name in which DMAP DB backend is running</description>          <defaultValue> ngdmapo/dmap_db_qa:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Docker_Image</name>          <description>Enter the docker image name in which DMAP App services is running</description>          <defaultValue> ngdmapo/dmap_app_qa:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_Modular_Test_Cases</name>          <description>Configure this parameter to Yes if you want to automatically run ModulerTest pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>No</string>              <string>Yes</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Flask_Backend_branch</name>          <description>Enter the name of the Backend branch</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>App_Docker_Image</name>          <description>Enter the Docker image based on the environments</description>          <defaultValue> ngdmapo/dmap_app_dev:v9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_Selenium_Suite</name>          <description>Configure this parameter to Yes if you want to automatically run Selenium suite pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Selenium_branch</name>          <description>Enter the name of the selenium branch.</description>          <defaultValue>Development</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Server_IP_Address</name>          <description>Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.46</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Podman_Image</name>          <description>Enter podman image name in which DMAP DB is running</description>          <defaultValue>9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Podman_Image</name>          <description>Enter podman image name in which DMAP APP is running</description>          <defaultValue>9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Release_Version</name>          <description>Please specify the DMAP build version</description>          <defaultValue>9.0.0.0 | 8.3.9.3</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>On_Prem_DMAP_Instance</name>          <description>Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Selenium_Suite_Name</name>          <description>Please specify the selenium suite name - Default ( Regression )</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Regression</string>              <string>Sanity</string>              <string>E2E</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>BuildType</name>          <description>Please specify the build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>qa</string>              <string>prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DMAP_License_Key</name>          <description>Please specify the DMAP License Key for Activation</description>          <defaultValue>4BE238-5ADC0F-4281BB-524D1E-0AA653-DAA8F0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Port</name>          <description>Enter the service port of server in which DMAP DB backend is running</description>          <defaultValue>5002</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Master_Port</name>          <description>Enter the serviece port of server in which DMAP APP backend is running</description>          <defaultValue>5001</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Worker_Port</name>          <description>Enter the serviece port of server in which DMAP APP backend is running</description>          <defaultValue>5005</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>MigrationType</name>          <description>As this is App selenium i am keeping this App Migration</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>App Migration</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <script>pipeline {    agent {        node {            label &apos;build_slave&apos;        }    }    environment {		BUILD_NAME = &quot;DMAP App Binary Build&quot;		//NOTIFYUSERS = &apos;abhayj@newtglobalcorp.com&apos;		NOTIFYUSERS = &apos;dmap_dev@newtglobalcorp.com&apos;		BUILD_DETAILS = &quot;&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}&quot;	}    parameters {        string(name: &apos;Java_Backend&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter the name of the Java Backend branch&apos;)        string(name: &apos;Flask_Backend_branch&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter the name of the Backend branch&apos;)	    string(name: &apos;Container_Name&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the name of the container in lower case, example: you can put your name&apos;)        string(name: &apos;Build_Image&apos;, defaultValue: &apos;ngdmapo/app_build:v1&apos;, description: &apos;Enter the name of the docker build image which will be used to build binaries&apos;)        string(name: &apos;Service_pack_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the version of Service pack. Sample values will be like: 6.3.2.0&apos;)        string(name: &apos;Latest_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the latest version of DMAP image. Sample values be like:7.4.2.1&apos;)        string(name: &apos;Minimum_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Minimum version of DMAP DB image to run current binaries. Sample values be like:7.4.2.1&apos;)        choice(name: &apos;Change_in_binary_for&apos;, choices: [&apos;App&apos;, &apos;DB&apos;,&apos;Both&apos;], description: &apos;Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)&apos;)        choice(name: &apos;Storage_Location&apos;, choices: [&apos;Azure_Blob&apos;], description: &apos;Enter the storage location to store Service pack which is BLOB&apos;)		string(name: &apos;VM_URL_for_binary_download&apos;, defaultValue: &apos;http://192.168.3.183/temp/app&apos;, description: &apos;Enter the On Prem VM URL to download binaries from&apos;)		string(name: &apos;OnPrem_Path&apos;, defaultValue: &apos;dev&apos;, description: &apos;On Prem Path to copy the file Dev:dev QA:qa&apos;)		string(name: &apos;Fallback_Blob_URL_for_binary_download&apos;, defaultValue: &apos;https://msmkdmapdisks.blob.core.windows.net&apos;, description: &apos;Enter the fallback blob URL to download binaries from&apos;)		string(name: &apos;Blob_Storage&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapextndevreleases, qa: dmapextnqareleases, prod: dmapextnreleases&apos;)        string(name: &apos;sonarTypes&apos;, defaultValue: &apos;VULNERABILITY,BUG,CODE_SMELL&apos;, description: &apos;Enter the sonarQube issue types to certify the build&apos;)        string(name: &apos;sonarSeverities&apos;, defaultValue: &apos;CRITICAL,BLOCKER,MAJOR&apos;, description: &apos;Enter the sonarQube issue severities to certify the build&apos;)        choice(name: &apos;Build_Type&apos;, choices: [&apos;Dev&apos;, &apos;QA&apos;, &apos;Prod&apos;], description: &apos;Select build type&apos;)        choice(name: &apos;Run_RestAssured_Test_Cases&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run RestAssured pipeline once this build is successful.&apos;)        string(name: &apos;Ip&apos;, defaultValue: &apos;localhost&apos;, description: &apos;Enter the ip of server in which DMAP backend is running&apos;)		string(name: &apos;DB_Port&apos;, defaultValue: &apos;7002&apos;, description: &apos;Enter the service port of server in which DMAP DB backend is running&apos;)		string(name: &apos;APP_Master_Port&apos;, defaultValue: &apos;5001&apos;, description: &apos;Enter the serviece port of server in which DMAP APP backend is running&apos;)		string(name: &apos;APP_Worker_Port&apos;, defaultValue: &apos;5005&apos;, description: &apos;Enter the serviece port of server in which DMAP APP backend is running&apos;)		string(name: &apos;DB_Docker_Image&apos;, defaultValue: &apos;ngdmapo/dmap_azure_blob_dev:v8.1.4.3&apos;, description: &apos;Enter the docker image name in which DMAP DB backend is running&apos;)		string(name: &apos;APP_Docker_Image&apos;, defaultValue: &apos;ngdmapo/dmap_app_migration_azure_blob_dev:v1.1.4.3&apos;, description: &apos;Enter the docker image name in which DMAP App services is running&apos;)        choice(name: &apos;Run_Modular_Test_Cases&apos;, choices: [&apos;No&apos;, &apos;Yes&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run ModulerTest pipeline once this build is successful.&apos;)        string(name: &apos;Flask_Backend_branch&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter the name of the Backend branch&apos;)	    string(name: &apos;App_Docker_Image&apos;, defaultValue: &apos;ngdmapo/dmap_app_migration_azure_blob_dev:v1.1.4.2&apos;, description: &apos;Enter the Docker image based on the environments&apos;)		choice(name: &apos;Run_Selenium_Suite&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run Selenium suite pipeline once this build is successful.&apos;)        string(name: &apos;Selenium_branch&apos;, defaultValue: &apos;anubhav-develop&apos;, description: &apos;Enter the name of the selenium branch.&apos;)        string(name: &apos;Server_IP_Address&apos;, defaultValue: &apos;192.168.1.46&apos;, description: &apos;Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.&apos;)		string(name: &apos;DB_Podman_Image&apos;, defaultValue: &apos;8.1.4.3&apos;, description: &apos;Enter podman image name in which DMAP DB is running&apos;)		string(name: &apos;APP_Podman_Image&apos;, defaultValue: &apos;1.1.4.3&apos;, description: &apos;Enter podman image name in which DMAP APP is running&apos;)		string(name: &apos;Release_Version&apos;, defaultValue: &apos;1.1.4.3 | 8.3.7.3&apos;, description: &apos;Please specify the DMAP build version&apos;)		choice(name: &apos;On_Prem_DMAP_Instance&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.&apos;)		choice(name: &apos;Selenium_Suite_Name&apos;, choices: [&apos;Sanity&apos;, &apos;E2E&apos;,&apos;Regression&apos;], description: &apos;Please specify the selenium suite name&apos;)		choice(name: &apos;BuildType&apos;, choices: [&apos;dev&apos;, &apos;qa&apos;,&apos;prod&apos;], description: &apos;Please specify the build type&apos;)		string(name: &apos;DMAP_License_Key&apos;, defaultValue: &apos;413C50-C1BF48-485880-F730EA-9BD916-87A0A3&apos;, description: &apos;Please specify the DMAP License Key for Activation&apos;)		string(name: &apos;DB_Port&apos;, defaultValue: &apos;5002&apos;, description: &apos;Enter the service port of server in which DMAP DB backend is running&apos;)        string(name: &apos;APP_Master_Port&apos;, defaultValue: &apos;5001&apos;, description: &apos;Enter the serviece port of server in which DMAP APP backend is running&apos;)        string(name: &apos;APP_Worker_Port&apos;, defaultValue: &apos;5005&apos;, description: &apos;Enter the serviece port of server in which DMAP APP backend is running&apos;)        choice(name: &apos;MigrationType&apos;, choices: [&apos;App Migration&apos;], description: &apos;As this is App selenium i am keeping this App Migration&apos;)    }    options {        timestamps()        timeout(time: 5, unit: &apos;HOURS&apos;)        buildDiscarder(logRotator(numToKeepStr: &apos;10&apos;))    }    stages {        stage (&quot;Checkout Code &quot;) {			steps {			    dir(&quot;DMAP_Extension_Backend&quot;) {			        deleteDir()					echo &quot;Checkout the DMAP_Extension code&quot;					git branch: &quot;${Java_Backend}&quot;, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_Extension-Backend.git&apos;			    }			    dir(&quot;DMAP_Extension_flask&quot;) {			        deleteDir()                    echo &quot;Checkout the DMAP_Extension_Flask code&quot;                    script {                        withCredentials([usernamePassword(credentialsId: &apos;Kavya_1709&apos;, usernameVariable: &apos;GIT_USERNAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;)]) {                        	git url: &quot;https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/newtglobalgit/DMAP_Extension-Flask.git&quot;, branch: &apos;${Flask_Backend_branch}&apos;                        }                    }			    }			}        }		stage (&quot;Sonar Analysis&quot;) {			steps {			    echo &quot;Flask sonar Analysis&quot;			    			    dir(&quot;DMAP_Extension_flask&quot;) {    		       sh &quot;sonar-scanner \    				-Dsonar.projectKey=DMAP_Extension-Flask \    				-Dsonar.projectName=DMAP_Extension-Flask \    				-Dsonar.sources=. \    				-Dsonar.host.url=http://192.168.3.119:9000/sonarqube\    				-Dsonar.login=25534cb4ff60d377ca72aefd244d70eff8bfcf56 \    				-Dsonar.exclusions=Tests/**,Spark/**,ModularityTesting/Spark/**&quot;                }                echo &quot;Python sonar Analysis done&quot;			    				echo &quot;Java sonar Analysis&quot;							    dir(&quot;DMAP_Extension_Backend&quot;) {                  sh &quot;mkdir /tmp/empty&quot;    		       sh &quot;sonar-scanner \    				-Dsonar.projectKey=DMAP-Extension-Backend \    				-Dsonar.projectName=DMAP-Extension-Backend \    				-Dsonar.language=java \    				-Dsonar.sources=src/main/java \    				-Dsonar.java.binaries=/tmp/empty \    				-Dsonar.host.url=http://192.168.3.119:9000/sonarqube\    				-Dsonar.login=25534cb4ff60d377ca72aefd244d70eff8bfcf56&quot;				   sh &quot;rm -r /tmp/empty&quot;                }			}		}		stage (&quot;Java Backend Tests&quot;) {			steps {			    dir(&quot;DMAP_Extension_Backend&quot;) {					echo &quot;Started Snyk Tests&quot;				   	sh &quot;chmod +x mvnw&quot;			         	snykSecurity failOnIssues: false, snykInstallation: &apos;SnykV2PluginTest&apos;, snykTokenId: &apos;Snyk_API&apos;				//     //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: &apos;SonarQube&apos;, reportFiles: &apos;JavaSonarQualityGateCheck.html&apos;, reportName: //&apos;Java_Backend SonarQube Analysis Result&apos;, reportTitles: &apos;SonarQube Result&apos;])				     	publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: &apos;.&apos;, reportFiles: &apos;snyk_report.html&apos;, reportName: &apos;Snyk Result&apos;, reportTitles: &apos;Snyk Result&apos;])			    }			}		}		stage (&quot;Java Backend Build&quot;) {			steps {			    withCredentials([string(credentialsId: &apos;GIT_User&apos;, variable: &apos;GITUser&apos;),string(credentialsId: &apos;Git_New_PAT&apos;, variable: &apos;Password&apos;)]) {                    sh &quot;docker run -d -it -e GIT_USER=${GITUser} -e GIT_PASS=${Password} -e GIT_BRANCH=${params.Java_Backend} --name=${params.Container_Name} ngdmapo/java_17:v2&quot;                }			    dir(&quot;DMAP_Extension_Backend&quot;) {				    sh &quot;docker ps -a&quot;					sh &quot;docker cp BuildScript/make_backend.sh ${params.Container_Name}:/opt/app-root/src&quot;					echo &quot;------------Copied build scipt inside build container------------------&quot;					sh &quot;docker exec ${params.Container_Name} sh /opt/app-root/src/make_backend.sh&quot;					echo &quot;----------------------------Binaries created-------------------------------&quot;					sh &quot;docker cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/DMAP.tar .&quot;					sh &quot;docker cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/jacoco-report/index.html .&quot;					//sh &quot;docker cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/site/surefire-report.html .&quot;					sh &quot;docker cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/reports/surefire.html .&quot;									echo &quot;------------------------Copied binaries in Jenkins----------------------&quot;					sh &quot;mv index.html DMAP_App_Junit_CoverageReport.html&quot;					//sh &quot;mv surefire-report.html DMAP_App_Junit_PassFailReport.html&quot;					sh &quot;mv surefire.html DMAP_App_Junit_PassFailReport.html&quot;					sh &quot;cp DMAP.tar ../&quot;			    }			    echo &quot;------------------Removing Build container ------------------&quot;				sh &quot;docker stop ${params.Container_Name}&quot;			    sh &quot;docker rm -f ${params.Container_Name}&quot;			}		}		stage (&quot;Flask Backend Test&quot;) {			steps {			    dir(&quot;DMAP_Extension_flask&quot;) {					echo &quot;Running Bandit&quot;				   	sh &quot;bandit -r ./ -x ./Deploy -ll -f html -o AppBanditAnalysisReport.html || true&quot;				    echo &quot;Running Sonar Analysis&quot;			        sh &quot;cd SonarQube; python TestSonar.py -I 192.168.3.119 -P 9000/sonarqube -T ${params.sonarTypes} -S ${params.sonarSeverities} | tee output.log&quot;										sh &quot;mv SonarQube/sonarAnalysis.html SonarQube/BackendFlaskSonarQualityGateCheck.html&quot;										publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;App_Python_Sonar_Issues.xlsx&apos;, reportName: &apos;App Python Sonar Excel Report&apos;, reportTitles: &apos;App Python Sonar Excel Report&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;App_Java_Sonar_Issues.xlsx&apos;, reportName: &apos;App java Sonar Excel Result&apos;, reportTitles: &apos;App Java Sonar Excel Result&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;AppBanditAnalysisReport.html&apos;, reportName: &apos;App Bandit Security Report&apos;, reportTitles: &apos;App Bandit Security Report&apos;])	     			    }			}		}		stage (&quot;Flask Backend Build&quot;) {			steps {					echo &quot;Create Binaries&quot;                  	sh &quot;docker pull ngdmapo/app_build:v1&quot;                 	sh &quot;docker run -it -d -p 5009:5002 -p 9099:8080 --name=${params.Container_Name} ngdmapo/app_build:v1&quot;				    echo &quot;---------------------Completed creating build container---------------------------&quot;                    dir(&quot;DMAP_Extension_flask&quot;) {						echo &quot;------------------Build container created-------------------------------&quot;						sh &quot;docker ps -a&quot;						sh &quot;docker cp . ${params.Container_Name}:/usr/local/tomcat/DMAP_Extension-Flask&quot;						sh &quot;docker cp BuildScript/make_backend.sh ${params.Container_Name}:/usr/local/tomcat&quot;						echo &quot;------------Copied build scipt inside build container------------------&quot;						sh &quot;docker exec --user=root ${params.Container_Name} sh /usr/local/tomcat/make_backend.sh&quot;						echo &quot;----------------------------Binaries created-------------------------------&quot;						sh &quot;docker cp ${params.Container_Name}:/usr/local/tomcat/DMAP_Extension-Flask/dist/Service.tar .&quot;						echo &quot;------------------------Copied binaries in Jenkins----------------------&quot;						sh &quot;cp Service.tar ../&quot;			    	}					echo &quot;------------------Removing Build container ------------------&quot;					sh &quot;docker stop ${params.Container_Name}&quot;					sh &quot;docker rm -f ${params.Container_Name}&quot;					echo &quot;------------------Build container removed successfully------------------&quot;			}		}		/*		stage (&quot;Modular Tests&quot;) {		    steps {				echo &quot;---------------------Creating App build container for modular test---------------------------&quot;				docker run -d -it -p 5433:5432 -p 9090:8080 -p 7002:5002 -e UI_PORT=9090 -e SERVICE_PORT=7002  -e DB_PORT=5433 --name=Run_Modular_Test ngdmapo/dmap_azure_blob_qa:v8.1.0.0				sh &quot;docker run -d -it  -p 5005:5000 -e UI_PORT=8085 -e SERVICE_PORT=5003 --name=run_modular_test_scripts_app ngdmapo/dmap_app_migration_azure_blob_dev:v1.1.0.1&quot;				echo &quot;------------------Wait 40 minutes to start backend-------------------------------&quot;				sleep 900				dir(&quot;DMAP_Extension_flask&quot;){					sh &quot;docker ps -a&quot;					sh &quot;docker cp run_modularTest.sh run_modular_test_scripts:/usr/local/tomcat&quot;					echo &quot;------------Copied modular test build script inside build container------------------&quot;					sh &quot;docker exec run_modular_test_scripts sh /usr/local/tomcat/run_modularTest.sh&quot;					sleep 600					echo &quot;------------Copying modular test cases reports------------------&quot;					sh &quot;docker cp run_modular_test_scripts:/usr/local/tomcat/DMAP_Extension_flask/ModularityTesting/ModularTestOutput.html .&quot;					sh &quot;docker cp run_modular_test_scripts:/usr/local/tomcat/DMAP_Extension_flask/htmlcov/index.html .&quot;					sh &quot;mv index.html ModularTestCoverageReport.html&quot;					echo &quot;------------Completed copying modular test cases reports------------------&quot;					echo &quot;------------Removing modular test container ------------------&quot;					sh &quot;docker stop run_modular_test_scripts&quot;					sh &quot;docker rm -f run_modular_test_scripts&quot;					sh &quot;docker stop Run_Modular_Test&quot;					sh &quot;docker rm -f Run_Modular_Test&quot;										echo &quot;------------Modular test container removed successfully------------------&quot;										publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;ModularTestOutput.html&apos;, reportName: &apos;Modular Test Output&apos;, reportTitles: &apos;Modular Test Output&apos;])					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;ModularTestCoverageReport.html&apos;, reportName: &apos;Modular Test Coverage&apos;, reportTitles: &apos;Modular Test Coverage&apos;])				}			}		}        */        stage (&quot;Package Binary&quot;) {			steps {			    echo &quot;------------------Package Binary------------------&quot;			    script {			      def now = new Date()			      def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))			      writeFile(file: &apos;dmap_release.yaml&apos;, text:&quot;product_name: DMAP\nbinary_version: ${params.Service_pack_version}\nminimal_supported_image_version: ${params.Minimum_dmap_image_version}\ndate_published: ${time}\nbuild_type: ${params.Build_Type}&quot;)			      sh &quot;tar cvf dmap_release.tar DMAP.tar Service.tar dmap_release.yaml&quot;			    }			}		}      	stage (&quot;Blob Storage Upload&quot;) {		    when {                expression { params.Storage_Location == &quot;Azure_Blob&quot; }            }			steps {				echo &quot;---------------Deploying Artifacts to Blob Storage--------------&quot;				script {				    echo &quot;Azure Blob Service Pack&quot;				    def now = new Date()			        def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))										sh &quot;echo \$(md5sum dmap_release.tar | cut -d &apos; &apos; -f1) &gt;&gt; dmap_tar_checksum.txt&quot;								        sh &quot;echo \$(stat -c \&quot;%n,%s\&quot; dmap_release.tar | column -s, | cut -d &apos;,&apos; -f2) &gt;&gt; dmap_tar_filesize.txt&quot;								        def md5sum = readFile(file: &apos;dmap_tar_checksum.txt&apos;)			        def filesize = readFile(file: &apos;dmap_tar_filesize.txt&apos;)										sh &quot;rm -rf dmap_tar_checksum.txt&quot;			        sh &quot;rm -rf dmap_tar_filesize.txt&quot;										sh &quot;echo latest_release_info&quot;			        writeFile(file: &apos;dmap_latest_release_info.yaml&apos;, text:&quot;product_name: DMAP\nlatest_image_version: ${params.Latest_dmap_image_version}\nlatest_binary_version: ${params.Service_pack_version}\nChange_in_binary_for : ${params.Change_in_binary_for}\nminimal_supported_image_version: ${params.Minimum_dmap_image_version}\ndate_published: ${time}\nchecksum: ${md5sum}filesize: ${filesize}fallback_blob_url_to_download_dmap_binary: https://msmkdmapdisks.blob.core.windows.net/${params.Blob_Storage}/\nurl_to_download_dmap_binary: https://msmkdmapdisks.blob.core.windows.net/${params.Blob_Storage}/&quot;)				}				withCredentials([string(credentialsId: &apos;BlobAccountKey&apos;, variable: &apos;BlobAccountKey&apos;)]) {					sh &quot;az storage blob upload --account-name msmkdmapdisks --account-key ${BlobAccountKey} --container-name ${params.Blob_Storage} --overwrite --file dmap_release.tar --name dmap_release.tar&quot;					sh &quot;az storage blob upload --account-name msmkdmapdisks --account-key ${BlobAccountKey} --container-name ${params.Blob_Storage} --overwrite --file dmap_latest_release_info.yaml --name dmap_latest_release_info.yaml&quot;				}			}		}		stage (&quot;On-Prem Upload&quot;) {		    when {                expression { params.Build_Type == &quot;Dev&quot; || params.Build_Type == &quot;QA&quot; }            }			steps {				echo &quot;---------------Copying artifacts to file path--------------&quot;				sh &quot;cp dmap_release.tar /var/www/html/temp/app/${params.OnPrem_Path}/&quot;				sh &quot;rm -rf dmap_latest_release_info.yaml&quot;				script {				    def now = new Date()			        def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))										sh &quot;echo \$(md5sum dmap_release.tar | cut -d &apos; &apos; -f1) &gt;&gt; dmap_tar_checksum.txt&quot;								        sh &quot;echo \$(stat -c \&quot;%n,%s\&quot; dmap_release.tar | column -s, | cut -d &apos;,&apos; -f2) &gt;&gt; dmap_tar_filesize.txt&quot;								        def md5sum = readFile(file: &apos;dmap_tar_checksum.txt&apos;)			        def filesize = readFile(file: &apos;dmap_tar_filesize.txt&apos;)										sh &quot;rm -rf dmap_tar_checksum.txt&quot;			        sh &quot;rm -rf dmap_tar_filesize.txt&quot;										sh &quot;echo latest_release_info&quot;        		    writeFile(file: &apos;dmap_latest_release_info.yaml&apos;, text:&quot;product_name: DMAP\nlatest_image_version: ${params.Latest_dmap_image_version}\nlatest_binary_version: ${params.Service_pack_version}\nChange_in_binary_for : ${params.Change_in_binary_for}\nminimal_supported_image_version: ${params.Minimum_dmap_image_version}\ndate_published: ${time}\nchecksum: ${md5sum}filesize: ${filesize}fallback_blob_url_to_download_dmap_binary: ${params.Fallback_Blob_URL_for_binary_download}/${params.Blob_Storage}\nurl_to_download_dmap_binary: ${params.VM_URL_for_binary_download}/${params.OnPrem_Path}/&quot;)    				        				sh &quot;cp dmap_latest_release_info.yaml /var/www/html/temp/app/${params.OnPrem_Path}/&quot; 				}			}		}    }    post {        always {            emailext attachmentsPattern: &apos;DMAP_Extension_flask/AppBanditAnalysisReport.html,DMAP_Extension_Backend/snyk_report.html,DMAP_Extension_Backend/DMAP_App_Junit_CoverageReport.html,DMAP_Extension_Backend/DMAP_App_Junit_PassFailReport.html,DMAP_Extension_flask/SonarQube/App_Python_Sonar_Issues.xlsx,DMAP_Extension_flask/SonarQube/App_Java_Sonar_Issues.xlsx,DMAP_Extension_flask/ModularTestCoverageReport.html,DMAP_Extension_flask/ModularTestOutput.html&apos;,            //emailext attachmentsPattern: &apos;DMAP_Extension_flask/AppBanditAnalysisReport.html,DMAP_Extension_Backend/snyk_report.html,DMAP_Extension_flask/SonarQube/App_Python_Sonar_Issues.xlsx,DMAP_Extension_flask/SonarQube/App_Java_Sonar_Issues.xlsx,DMAP_Extension_flask/ModularTestCoverageReport.html,DMAP_Extension_flask/ModularTestOutput.html&apos;,            subject: &quot;Jenkins Job Report For ${BUILD_NAME} - ${currentBuild.currentResult}&quot;,			body: &quot;BUILD DETAILS: ${BUILD_DETAILS} &lt;BR&gt; BUILD STATUS: ${currentBuild.currentResult} &lt;BR&gt; BUILD TYPE: ${params.Build_Type} &lt;BR&gt; BUILD VERSION: ${params.Service_pack_version}&quot;,			to: &quot;${NOTIFYUSERS}&quot;        }        success {            script {                if (params[&apos;Run_RestAssured_Test_Cases&apos;] == &apos;Yes&apos;) {                    echo &quot;Going to start Rest Assured Test case pipeline&quot;                    // Triggering additional builds after the current build is successful                    build job: &apos;6_DMAP_APP_RestAssured_Test_Cases&apos;,                    parameters: [                        string(name: &apos;Ip&apos;, value: params[&apos;Ip&apos;]),                        string(name: &apos;DB_Port&apos;, value: params[&apos;DB_Port&apos;]),                        string(name: &apos;APP_Master_Port&apos;, value: params[&apos;APP_Master_Port&apos;]),                        string(name: &apos;APP_Worker_Port&apos;, value: params[&apos;APP_Worker_Port&apos;]),                        string(name: &apos;DB_Docker_Image&apos;, value: params[&apos;DB_Docker_Image&apos;]),                        string(name: &apos;APP_Docker_Image&apos;, value: params[&apos;APP_Docker_Image&apos;]),                    ],                    wait: false                }                if (params[&apos;Run_Modular_Test_Cases&apos;] == &apos;Yes&apos;)  {                    echo &quot;Going to start Modular Test case pipeline&quot;                    // Triggering additional builds after the current build is successful                    build job: &apos;7_DMAP_APP_Modularity_Test_Cases&apos;,                    parameters: [                        string(name: &apos;Flask_Backend_branch&apos;, value: params[&apos;Flask_Backend_branch&apos;]),                        string(name: &apos;App_Docker_Image&apos;, value: params[&apos;App_Docker_Image&apos;]),                    ],                    wait: false                }				if ((params[&apos;Build_Type&apos;] == &apos;QA&apos; || params[&apos;Build_Type&apos;] == &apos;Prod&apos;) &amp;&amp; params[&apos;Run_Selenium_Suite&apos;] == &apos;Yes&apos;)  {					echo &quot;Going to start Selenium testsuite pipeline&quot;					// Triggering additional builds after the current build is successful					build job: &apos;8_Podman_App_Selenium_Test_Suite&apos;,					parameters: [						string(name: &apos;Selenium_branch&apos;, value: &quot;${params.Selenium_branch}&quot;),						string(name: &apos;Server_IP_Address&apos;, value: &quot;${params.Server_IP_Address}&quot;),						string(name: &apos;DB_Podman_Image&apos;, value: &quot;${params.DB_Podman_Image}&quot;), 						string(name: &apos;APP_Podman_Image&apos;, value: &quot;${params.APP_Podman_Image}&quot;),						string(name: &apos;Release_Version&apos;, value: &quot;${params.Release_Version}&quot;),						string(name: &apos;On_Prem_DMAP_Instance&apos;, value: &quot;${params.On_Prem_DMAP_Instance}&quot;),						string(name: &apos;Selenium_Suite_Name&apos;, value: &quot;${params.Selenium_Suite_Name}&quot;),						string(name: &apos;BuildType&apos;, value: &quot;${params.BuildType}&quot;),						string(name: &apos;DMAP_License_Key&apos;, value: &quot;${params.DMAP_License_Key}&quot;),						string(name: &apos;DB_Port&apos;, value: &quot;${params.DB_Port}&quot;),						string(name: &apos;APP_Master_Port&apos;, value: &quot;${params.APP_Master_Port}&quot;),						string(name: &apos;APP_Worker_Port&apos;, value: &quot;${params.APP_Worker_Port}&quot;),						string(name: &apos;MigrationType&apos;, value: &quot;${params.MigrationType}&quot;),					],					wait: false				}            }        }    }}</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>