<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.1"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.1">      <jobProperties/>      <triggers/>      <parameters/>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description></description>  <keepDependencies>false</keepDependencies>  <properties/>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.82">    <script>pipeline {    agent {        node {            label &apos;build_slave&apos;        }    }    stages {        stage(&apos;Setup&apos;) {            steps {                script {                    echo &apos;Setting up the environment...&apos;                }            }        }        stage(&apos;Parallel Execution&apos;) {            parallel {                stage(&apos;Azure Provisioning&apos;) {                    steps {                        script {                            echo &apos;Provisioning Azure infrastructure...&apos;                            // Add your Azure provisioning commands here                        }                    }                }                                stage(&apos;GCP Provisioning&apos;) {                    steps {                        script {                            echo &apos;Provisioning GCP infrastructure...&apos;                            // Add your GCP provisioning commands here                        }                    }                }                stage(&apos;Run Tests&apos;) {                    steps {                        script {                            echo &apos;Running tests...&apos;                            // Add your test commands here                        }                    }                }            }        }    }        post {        always {            echo &quot;Cleaning up after the pipeline execution.&quot;        }        success {            echo &quot;Pipeline succeeded!&quot;        }        failure {            echo &quot;Pipeline failed!&quot;        }    }}</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>