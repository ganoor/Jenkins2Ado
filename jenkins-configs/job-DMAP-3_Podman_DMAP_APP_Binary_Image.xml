<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>build_app_image</string>        <string>service_pack_location</string>        <string>MigrationType</string>        <string>Build_Image</string>        <string>S3_Bucket</string>        <string>Blob_Storage</string>        <string>Build_Type</string>        <string>APP_Podman_Image</string>        <string>Java_Backend</string>        <string>Flask_Backend_branch</string>        <string>Change_in_binary_for</string>        <string>Run_Selenium_Suite</string>        <string>BuildType</string>        <string>sonarSeverities</string>        <string>DB_Podman_Image</string>        <string>docker_branch</string>        <string>Worker_Node_IP_Address</string>        <string>Selenium_branch</string>        <string>Release_Version</string>        <string>Latest_dmap_image_version</string>        <string>Storage_Location</string>        <string>Selenium_Suite_Name</string>        <string>Service_pack_version</string>        <string>On_Prem_DMAP_Instance</string>        <string>Minimum_dmap_image_version</string>        <string>Master_Node_IP_Address</string>        <string>Container_Name</string>        <string>sonarTypes</string>        <string>docker_image_version</string>        <string>DMAP_License_Key</string>        <string>docker_image</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>Job to Build binary and Image based on the Configuration. Based on the configuration build and Push binary into Azure Blob and/or push the image into Podman Redhat Repository</description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Java_Backend</name>          <description>Enter the name of the Java Backend branch</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Flask_Backend_branch</name>          <description>Enter the name of the Backend branch</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Container_Name</name>          <description>Enter the name of the container in lower case, example: you can put your name</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Build_Image</name>          <description>Enter the name of the docker build image which will be used to build binaries</description>          <defaultValue>ngdmapo/app_build:v1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Service_pack_version</name>          <description>Enter the version of Service pack. Sample values will be like: 6.3.2.0</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Latest_dmap_image_version</name>          <description>Enter the latest version of DMAP image. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Minimum_dmap_image_version</name>          <description>Enter the Minimum version of DMAP DB image to run current binaries. Sample values be like:7.4.2.1</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Change_in_binary_for</name>          <description>Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>App</string>              <string>DB</string>              <string>Both</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Storage_Location</name>          <description>Enter the storage location to store Service pack which is either in S3 or BLOB</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>AWS_S3</string>              <string>Azure_Blob</string>              <string>Both</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>S3_Bucket</name>          <description>Enter the S3 Bucket path for uploading the binaries. Sample values will be like dev: dmap-deployment/dev, qa: dmap-deployment/qa, prod: dmap-deployment/prod</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Blob_Storage</name>          <description>Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapextnpodmandevreleases, qa: dmapextnpodmanqareleases, prod: dmapextnpodmanreleases</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarTypes</name>          <description>Enter the sonarQube issue types to certify the build</description>          <defaultValue>VULNERABILITY,BUG,CODE_SMELL</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>sonarSeverities</name>          <description>Enter the sonarQube issue severities to certify the build</description>          <defaultValue>CRITICAL,BLOCKER,MAJOR</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Build_Type</name>          <description>Select build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Dev</string>              <string>QA</string>              <string>Prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>build_app_image</name>          <description>Select Yes if you want to build the App Image or else select No</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>No</string>              <string>Yes</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>docker_image</name>          <description>Select Docker Image name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>dmap_app_migration_azure_blob_podman_dev</string>              <string>dmap_app_migration_azure_blob_podman_qa</string>              <string>dmap_app_migration_azure_blob_podman_prod</string>              <string>dmap_aws_s3_podman_prod</string>              <string>dmap_aws_s3_podman_dev</string>              <string>dmap_aws_s3_podman_qa</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>docker_branch</name>          <description>Enter git branch to pull docker files</description>          <defaultValue>develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>docker_image_version</name>          <description>Enter the Docker Image version</description>          <defaultValue>v1.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>service_pack_location</name>          <description>Enter service pack location (S3/BLOB). It should be full path</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Run_Selenium_Suite</name>          <description>Configure this parameter to Yes if you want to automatically run Selenium suite pipeline once this build is successful.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>No</string>              <string>Yes</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Selenium_branch</name>          <description>Enter the name of the selenium branch.</description>          <defaultValue>Development</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Master_Node_IP_Address</name>          <description>Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.46</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Worker_Node_IP_Address</name>          <description>Please Enter the DMAP Worker Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.46</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Podman_Image</name>          <description>Enter podman image name in which DMAP DB is running</description>          <defaultValue>quay.io/newtglobaldev/ngdmapo/dmap_azure_blob_podman_qa:v8.1.4.2</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Podman_Image</name>          <description>Enter podman image name in which DMAP APP is running</description>          <defaultValue>quay.io/newtglobaldev/ngdmapo/dmap_app_migration_azure_blob_podman_qa:v1.1.4.3</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Release_Version</name>          <description>Please specify the DMAP build version</description>          <defaultValue>8.1.4.3 | 8.3.2.1</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>On_Prem_DMAP_Instance</name>          <description>Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>No</string>              <string>Yes</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Selenium_Suite_Name</name>          <description>Please specify the selenium suite name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Sanity</string>              <string>E2E</string>              <string>Regression</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>BuildType</name>          <description>Please specify the build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Dev</string>              <string>QA</string>              <string>Prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DMAP_License_Key</name>          <description>Please specify the DMAP License Key for Activation</description>          <defaultValue>C04F60-47780C-4157B5-76E50A-7C0B4F-40F993</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>MigrationType</name>          <description>Please specify Migration Type: App Migration or DB Migration</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>App Migration</string>              <string>DB Migration</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <script>pipeline {    agent {        node {            label &apos;build_slave_podman&apos;        }    } environment {		BUILD_NAME = &quot;Podman DMAP App Build&quot;	//	NOTIFYUSERS = &apos;rajivm@newtglobalcorp.com&apos;		NOTIFYUSERS = &apos;dmap_dev@newtglobalcorp.com&apos;		PATH = &quot;/home/newtdba/.nvm/versions/node/v18.3.0/bin:/home/newtdba/.local/bin:/home/newtdba/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/newtdba/.nvm/versions/node/v16.18.1/bin/ng:/var/lib/jenkins/sonar-scanner-4.8.1.3023/bin:/usr/lib/jvm/java-11-openjdk-11.0.20.1.1-2.el9.x86_64/bin/java:/home/newtdba/.local/bin/bandit:/opt/sonar-scanner/bin:$PATH&quot;        JAVA_HOME = &apos;/usr/lib/jvm/java-11-openjdk-11.0.20.1.1-2.el9.x86_64&apos;		BUILD_DETAILS = &quot;&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}&quot;	}    parameters {        string(name: &apos;Java_Backend&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter the name of the Java Backend branch&apos;)        string(name: &apos;Flask_Backend_branch&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter the name of the Backend branch&apos;)	    string(name: &apos;Container_Name&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the name of the container in lower case, example: you can put your name&apos;)        string(name: &apos;Build_Image&apos;, defaultValue: &apos;ngdmapo/app_build:v1&apos;, description: &apos;Enter the name of the docker build image which will be used to build binaries&apos;)        string(name: &apos;Service_pack_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the version of Service pack. Sample values will be like: 6.3.2.0&apos;)        string(name: &apos;Latest_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the latest version of DMAP image. Sample values be like:7.4.2.1&apos;)        string(name: &apos;Minimum_dmap_image_version&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Minimum version of DMAP DB image to run current binaries. Sample values be like:7.4.2.1&apos;)        choice(name: &apos;Change_in_binary_for&apos;, choices: [&apos;App&apos;, &apos;DB&apos;,&apos;Both&apos;], description: &apos;Select App or DB if there is binary change in App or DB respectively, select Both if there is binary change in Both (App and DB)&apos;)        choice(name: &apos;Storage_Location&apos;, choices: [&apos;AWS_S3&apos;, &apos;Azure_Blob&apos;,&apos;Both&apos;], description: &apos;Enter the storage location to store Service pack which is either in S3 or BLOB&apos;)		string(name: &apos;S3_Bucket&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the S3 Bucket path for uploading the binaries. Sample values will be like dev: dmap-deployment/dev, qa: dmap-deployment/qa, prod: dmap-deployment/prod&apos;)		string(name: &apos;Blob_Storage&apos;, defaultValue: &apos;&apos;, description: &apos;Enter the Blob storage path for uploading the binaries. Sample values will be like dev: dmapextnpodmandevreleases, qa: dmapextnpodmanqareleases, prod: dmapextnpodmanreleases&apos;)        string(name: &apos;sonarTypes&apos;, defaultValue: &apos;VULNERABILITY,BUG,CODE_SMELL&apos;, description: &apos;Enter the sonarQube issue types to certify the build&apos;)        string(name: &apos;sonarSeverities&apos;, defaultValue: &apos;CRITICAL,BLOCKER,MAJOR&apos;, description: &apos;Enter the sonarQube issue severities to certify the build&apos;)        choice(name: &apos;Build_Type&apos;, choices: [&apos;Dev&apos;, &apos;QA&apos;, &apos;Prod&apos;], description: &apos;Select build type&apos;)        choice(name: &apos;build_app_image&apos;, choices: [&apos;No&apos;, &apos;Yes&apos;], description: &apos;Select Yes if you want to build the App Image or else select No&apos;)        choice(name: &apos;docker_image&apos;, choices: [&apos;dmap_app_migration_azure_blob_podman_dev&apos;,&apos;dmap_app_migration_azure_blob_podman_qa&apos;,&apos;dmap_app_migration_azure_blob_podman_prod&apos;,&apos;dmap_aws_s3_podman_prod&apos;,&apos;dmap_aws_s3_podman_dev&apos;, &apos;dmap_aws_s3_podman_qa&apos;,], description: &apos;Select Docker Image name&apos;)	    string(name: &apos;docker_branch&apos;, defaultValue: &apos;develop&apos;, description: &apos;Enter git branch to pull docker files&apos;)        string(name: &apos;docker_image_version&apos;, defaultValue: &apos;v1.0.0.0&apos;, description: &apos;Enter the Docker Image version&apos;)        string(name: &apos;service_pack_location&apos;, defaultValue: &apos;&apos;, description: &apos;Enter service pack location (S3/BLOB). It should be full path&apos;)        choice(name: &apos;Run_Selenium_Suite&apos;, choices: [&apos;No&apos;, &apos;Yes&apos;], description: &apos;Configure this parameter to Yes if you want to automatically run Selenium suite pipeline once this build is successful.&apos;)		string(name: &apos;Selenium_branch&apos;, defaultValue: &apos;Development&apos;, description: &apos;Enter the name of the selenium branch.&apos;)        string(name: &apos;Master_Node_IP_Address&apos;, defaultValue: &apos;192.168.1.46&apos;, description: &apos;Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.&apos;)        string(name: &apos;Worker_Node_IP_Address&apos;, defaultValue: &apos;192.168.1.46&apos;, description: &apos;Please Enter the DMAP Worker Node IP Address of the server on which DMAP is running.&apos;)		string(name: &apos;DB_Podman_Image&apos;, defaultValue: &apos;quay.io/newtglobaldev/ngdmapo/dmap_azure_blob_podman_qa:v8.1.4.2&apos;, description: &apos;Enter podman image name in which DMAP DB is running&apos;)        string(name: &apos;APP_Podman_Image&apos;, defaultValue: &apos;quay.io/newtglobaldev/ngdmapo/dmap_app_migration_azure_blob_podman_qa:v1.1.4.3&apos;, description: &apos;Enter podman image name in which DMAP APP is running&apos;)        string(name: &apos;Release_Version&apos;, defaultValue: &apos;8.1.4.3 | 8.3.2.1&apos;, description: &apos;Please specify the DMAP build version&apos;)		choice(name: &apos;On_Prem_DMAP_Instance&apos;, choices: [&apos;No&apos;, &apos;Yes&apos;], description: &apos;Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.&apos;)        choice(name: &apos;Selenium_Suite_Name&apos;, choices: [&apos;Sanity&apos;, &apos;E2E&apos;, &apos;Regression&apos;], description: &apos;Please specify the selenium suite name&apos;)        choice(name: &apos;BuildType&apos;, choices: [&apos;Dev&apos;, &apos;QA&apos;, &apos;Prod&apos;], description: &apos;Please specify the build type&apos;)		string(name: &apos;DMAP_License_Key&apos;, defaultValue: &apos;C04F60-47780C-4157B5-76E50A-7C0B4F-40F993&apos;, description: &apos;Please specify the DMAP License Key for Activation&apos;)        choice(name: &apos;MigrationType&apos;, choices: [&apos;App Migration&apos;, &apos;DB Migration&apos;], description: &apos;Please specify Migration Type: App Migration or DB Migration&apos;)        }    options {        timestamps()        timeout(time: 5, unit: &apos;HOURS&apos;)        buildDiscarder(logRotator(numToKeepStr: &apos;10&apos;))    }    stages {        stage (&quot;Checkout Code &quot;) {			steps {			    			    dir(&quot;DMAP_Extension_Backend&quot;){			        deleteDir()					echo &quot;Checkout the DMAP_Extension code&quot;					git branch: Java_Backend, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_Extension-Backend.git&apos;			            }			    dir(&quot;DMAP_Extension_flask&quot;){			        deleteDir()                    echo &quot;Checkout the DMAP_Extension_Flask code&quot;                    script {                        withCredentials([usernamePassword(credentialsId: &apos;Kavya_1709&apos;, usernameVariable: &apos;GIT_USERNAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;)]) {                        git url: &quot;https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/newtglobalgit/DMAP_Extension-Flask.git&quot;, branch: Flask_Backend_branch                        sh &apos;git lfs install&apos;						sh &apos;git lfs fetch&apos;                        sh &apos;git lfs checkout&apos;                            }                    }			        			    }                dir(&quot;DMAP_App_Docker&quot;){			        deleteDir()					echo &quot;Checkout the DMAP_DB_Dockerfile&quot;					git branch: docker_branch, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_Extension_Docker_Linux.git&apos;			        } 			      }        }					stage (&quot;Sonar Analysis&quot;) {			steps{			    echo &quot;Flask sonar Analysis&quot;			    			     dir(&quot;DMAP_Extension_flask&quot;){    		       sh &quot;/opt/sonar-scanner/bin/sonar-scanner \    				-Dsonar.projectKey=DMAP_Extension-Flask \    				-Dsonar.projectName=DMAP_Extension-Flask \    				-Dsonar.sources=. \    				-Dsonar.host.url=http://192.168.3.119:9000/sonarqube \    				-Dsonar.login=25534cb4ff60d377ca72aefd244d70eff8bfcf56 \    				-Dsonar.exclusions=Tests/**,Spark/**,ModularityTesting/Spark/**&quot;    			                }                 echo &quot;Python sonar Analysis done&quot;			    				echo &quot;Java sonar Analysis&quot;							    dir(&quot;DMAP_Extension_Backend&quot;){                   sh &quot;mkdir /tmp/empty&quot;    		       sh &quot;/opt/sonar-scanner/bin/sonar-scanner \    				-Dsonar.projectKey=DMAP-Extension-Backend \    				-Dsonar.projectName=DMAP-Extension-Backend \    				-Dsonar.language=java \    				-Dsonar.sources=src/main/java \    				-Dsonar.java.binaries=/tmp/empty \    				-Dsonar.host.url=http://192.168.3.119:9000/sonarqube\    				-Dsonar.login=25534cb4ff60d377ca72aefd244d70eff8bfcf56&quot;				   sh &quot;rm -r /tmp/empty&quot;                }			}     					    }		stage (&quot;Java Backend Tests&quot;){			steps{			    dir(&quot;DMAP_Extension_Backend&quot;){				    echo &quot;Started Snyk Tests&quot;				    				   sh &quot;chmod +x mvnw&quot;			         snykSecurity failOnIssues: false, snykInstallation: &apos;SnykV2PluginTest&apos;, snykTokenId: &apos;Snyk_API&apos;								    													//     //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: &apos;SonarQube&apos;, reportFiles: &apos;JavaSonarQualityGateCheck.html&apos;, reportName: //&apos;Java_Backend SonarQube Analysis Result&apos;, reportTitles: &apos;SonarQube Result&apos;])				     publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: &apos;.&apos;, reportFiles: &apos;snyk_report.html&apos;, reportName: &apos;Snyk Result&apos;, reportTitles: &apos;Snyk Result&apos;])			     }			}		}		stage (&quot;Java Backend Build&quot;){			steps{			    withCredentials([string(credentialsId: &apos;GIT_User&apos;, variable: &apos;GITUser&apos;),string(credentialsId: &apos;Git_New_PAT&apos;, variable: &apos;Password&apos;)]) {                    sh &quot;podman run -d -it -e GIT_USER=${GITUser} -e GIT_PASS=${Password} -e GIT_BRANCH=${params.Java_Backend} --name=${params.Container_Name} docker.io/ngdmapo/java_17:v2&quot;                }			    dir(&quot;DMAP_Extension_Backend&quot;){				    sh &quot;podman ps -a&quot;					sh &quot;podman cp BuildScript/make_backend.sh ${params.Container_Name}:/opt/app-root/src&quot;					echo &quot;------------Copied build scipt inside build container------------------&quot;					sh &quot;podman exec ${params.Container_Name} sh /opt/app-root/src/make_backend.sh&quot;					echo &quot;----------------------------Binaries created-------------------------------&quot;					sh &quot;podman cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/DMAP.tar .&quot;					sh &quot;podman cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/jacoco-report/index.html .&quot;					//sh &quot;podman cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/site/surefire-report.html .&quot;					sh &quot;podman cp ${params.Container_Name}:/opt/app-root/src/DMAP_Extension-Backend/target/reports/surefire.html .&quot;					echo &quot;------------------------Copied binaries in Jenkins----------------------&quot;					sh &quot;mv index.html DMAP_App_Junit_CoverageReport.html&quot;					//sh &quot;mv surefire-report.html DMAP_App_Junit_PassFailReport.html&quot;					sh &quot;mv surefire.html DMAP_App_Junit_PassFailReport.html&quot;					sh &quot;cp DMAP.tar ../&quot;			     			      }			      	echo &quot;------------------Removing Build container ------------------&quot;					sh &quot;podman stop ${params.Container_Name}&quot;			    sh &quot;podman rm -f ${params.Container_Name}&quot;			}		}		stage (&quot;Flask Backend Test&quot;){			steps{			    dir(&quot;DMAP_Extension_flask&quot;){				    echo &quot;Running Bandit&quot;				    				   sh &quot;~/.local/bin/bandit -r ./ -x ./Deploy -ll -f html -o AppBanditAnalysisReport.html || true&quot;				    echo &quot;Running Sonar Analysis&quot;			        sh &quot;cd SonarQube; python TestSonar.py -I 192.168.3.119 -P 9000/sonarqube -T ${params.sonarTypes} -S ${params.sonarSeverities} | tee output.log&quot;										sh &quot;mv SonarQube/sonarAnalysis.html SonarQube/BackendFlaskSonarQualityGateCheck.html&quot;									publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;App_Python_Sonar_Issues.xlsx&apos;, reportName: &apos;App Python Sonar Excel Report&apos;, reportTitles: &apos;App Python Sonar Excel Report&apos;])				publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.\\SonarQube&apos;, reportFiles: &apos;App_Java_Sonar_Issues.xlsx&apos;, reportName: &apos;App java Sonar Excel Result&apos;, reportTitles: &apos;App Java Sonar Excel Result&apos;])            	publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: &apos;.&apos;, reportFiles: &apos;AppBanditAnalysisReport.html&apos;, reportName: &apos;App Bandit Security Report&apos;, reportTitles: &apos;App Bandit Security Report&apos;])	     			      }			}		}				stage (&quot;Flask Backend Build&quot;){			steps{				    echo &quot;Create Binaries&quot;                   sh &quot;podman pull docker.io/ngdmapo/app_build:v1&quot;                 sh &quot;podman run -it -d -p 5009:5002 -p 9099:8080 --name=${params.Container_Name} docker.io/ngdmapo/app_build:v1&quot;				    echo &quot;---------------------Completed creating build container---------------------------&quot;                    dir(&quot;DMAP_Extension_flask&quot;){                    echo &quot;------------------Build container created-------------------------------&quot;					sh &quot;podman ps -a&quot;                    sh &quot;podman cp . ${params.Container_Name}:/usr/local/tomcat/DMAP_Extension-Flask&quot;					sh &quot;podman cp BuildScript/make_backend.sh ${params.Container_Name}:/usr/local/tomcat&quot;					echo &quot;------------Copied build scipt inside build container------------------&quot;					sh &quot;podman exec --user=root ${params.Container_Name} sh /usr/local/tomcat/make_backend.sh&quot;					echo &quot;----------------------------Binaries created-------------------------------&quot;					sh &quot;podman cp ${params.Container_Name}:/usr/local/tomcat/DMAP_Extension-Flask/dist/Service.tar .&quot;					echo &quot;------------------------Copied binaries in Jenkins----------------------&quot;					sh &quot;cp Service.tar ../&quot;			      }                echo &quot;------------------Removing Build container ------------------&quot;				sh &quot;podman stop ${params.Container_Name}&quot;			    sh &quot;podman rm -f ${params.Container_Name}&quot;			    echo &quot;------------------Build container removed successfully------------------&quot;			}		}        stage (&quot;Package Binary&quot;){			steps {			    echo &quot;------------------Package Binary------------------&quot;			    script {			      def now = new Date()			      def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))			      writeFile(file: &apos;dmap_release.yaml&apos;, text:&quot;product_name: DMAP\nbinary_version: ${params.Service_pack_version}\nminimal_supported_image_version: ${params.Minimum_dmap_image_version}\ndate_published: ${time}\nbuild_type: ${params.Build_Type}&quot;)			      sh &quot;tar cvf dmap_release.tar DMAP.tar Service.tar dmap_release.yaml&quot;			    }			}		}                stage (&quot;Blob Storage Upload&quot;){		    when {                expression { params.Storage_Location == &quot;Azure_Blob&quot; || params.Storage_Location == &quot;Both&quot; }            }			steps {				echo &quot;---------------Deploying Artifacts to Blob Storage--------------&quot;				script {				    echo &quot;Azure Blob Service Pack&quot;				    def now = new Date()			        def time = now.format(&quot;yyyy-MM-dd HH:mm:ss&quot;, TimeZone.getTimeZone(&apos;UTC&apos;))										sh &quot;echo \$(md5sum dmap_release.tar | cut -d &apos; &apos; -f1) &gt;&gt; dmap_tar_checksum.txt&quot;								        sh &quot;echo \$(stat -c \&quot;%n,%s\&quot; dmap_release.tar | column -s, | cut -d &apos;,&apos; -f2) &gt;&gt; dmap_tar_filesize.txt&quot;								        def md5sum = readFile(file: &apos;dmap_tar_checksum.txt&apos;)			        def filesize = readFile(file: &apos;dmap_tar_filesize.txt&apos;)										sh &quot;rm -rf dmap_tar_checksum.txt&quot;			        sh &quot;rm -rf dmap_tar_filesize.txt&quot;										sh &quot;echo latest_release_info&quot;			        writeFile(file: &apos;dmap_latest_release_info.yaml&apos;, text:&quot;product_name: DMAP\nlatest_image_version: ${params.Latest_dmap_image_version}\nlatest_binary_version: ${params.Service_pack_version}\nChange_in_binary_for : ${params.Change_in_binary_for}\nminimal_supported_image_version: ${params.Minimum_dmap_image_version}\ndate_published: ${time}\nchecksum: ${md5sum}filesize: ${filesize}url_to_download_dmap_binary: https://msmkdmapdisks.blob.core.windows.net/${params.Blob_Storage}/&quot;)				}							        withCredentials([string(credentialsId: &apos;BlobAccountKey&apos;, variable: &apos;BlobAccountKey&apos;)]) {                        sh &quot;az storage blob upload --account-name msmkdmapdisks --account-key ${BlobAccountKey} --container-name ${params.Blob_Storage} --overwrite --file dmap_release.tar --name dmap_release.tar&quot;                        sh &quot;az storage blob upload --account-name msmkdmapdisks --account-key ${BlobAccountKey} --container-name ${params.Blob_Storage} --overwrite --file dmap_latest_release_info.yaml --name dmap_latest_release_info.yaml&quot;			        }                			}		}        stage (&quot;podman Build&quot;) {        	  when {                expression { params.build_app_image == &quot;Yes&quot; }                }    		steps {    		    dir(&quot;DMAP_App_Docker&quot;){    		    script {    		    writeFile(file: &apos;dmap_image_release.yaml&apos;, text:&quot;name: DMAP\nimage_version: ${params.docker_image_version}\ninitial_service_pack_version: ${params.Service_pack_version}\n&quot;)    		    writeFile(file: &apos;dmap_binary_install_mode.yaml&apos;, text:&quot;binary_install_mode: automatic\n&quot;)			    if(params.docker_image == &quot;dmap_aws_s3_podman_dev&quot; || params.docker_image == &quot;dmap_aws_s3_podman_qa&quot; || params.docker_image == &quot;dmap_aws_s3_podman_prod&quot;){       			        echo &quot;Build AWS Podman Image&quot;    			                        sh &quot;&quot;&quot;                    sed -i -e &apos;s#service_pack_location#${params.service_pack_location}#&apos; docker_dmap_aws                    &quot;&quot;&quot;                        			    sh &quot;podman build --cgroup-manager=cgroupfs -t ngdmapo/${params.docker_image}:${params.docker_image_version} -f docker_dmap_aws .&quot;    			    sh &quot;podman images&quot;			    }			    else if(params.docker_image == &quot;dmap_app_migration_azure_blob_podman_prod&quot; || params.docker_image == &quot;dmap_app_migration_azure_blob_podman_dev&quot; || params.docker_image == &quot;dmap_app_migration_azure_blob_podman_qa&quot;){			        echo &quot;Podman Azure Blob&quot;			        writeFile(file: &apos;dmap_image_release.yaml&apos;, text:&quot;name: DMAP\nimage_version: ${params.docker_image_version}\ninitial_service_pack_version: ${params.Service_pack_version}\n&quot;)			        			        echo &quot;Build Azure Podman Image&quot;    			    sh &quot;&quot;&quot;                    sed -i -e &apos;s#service_pack_location#${params.service_pack_location}#&apos; Dockerfile                    &quot;&quot;&quot;                        			    sh &quot;podman build --cgroup-manager=cgroupfs -t ngdmapo/${params.docker_image}:${params.docker_image_version} .&quot;    		    			 			    }			     sh &quot;podman images&quot;    		    }			    }    		}    		    	}     stage (&quot;podman Push&quot;) {        when {                expression { params.build_app_image == &quot;Yes&quot; }            }    		steps {    		   script{    		        echo &quot;Push podman Image&quot;    			        			   withCredentials([usernamePassword(credentialsId: &apos;podmanHubCred&apos;, passwordVariable: &apos;podmanHubPassword&apos;, usernameVariable: &apos;podmanHubUser&apos;)]) {                        sh &quot;podman login -u ${env.podmanHubUser} -p ${env.podmanHubPassword} quay.io&quot;    			    			        sh &quot;podman tag localhost/ngdmapo/${docker_image}:${docker_image_version} quay.io/${env.podmanHubUser}/ngdmapo/${docker_image}:latest&quot;    			        sh &quot;podman push quay.io/${env.podmanHubUser}/ngdmapo/${docker_image}:latest&quot;    			        sh &quot;podman tag localhost/ngdmapo/${docker_image}:${docker_image_version} quay.io/${env.podmanHubUser}/ngdmapo/${docker_image}:${docker_image_version}&quot;						sh &quot;podman push quay.io/${env.podmanHubUser}/ngdmapo/${docker_image}:${docker_image_version}&quot;    			        //sh &quot;podman push quay.io/${env.podmanHubUser}/ngdmapo/${docker_image}:${docker_image_version}&quot;    			            			          			            			    }    			        			    }    	    	    }	    }	stage (&quot;Remove Podman Image&quot;) {	        when {                expression { params.build_app_image == &quot;Yes&quot; }            }    		steps {    			    echo &quot;Remove Docker Image&quot;    			  //  sh &quot;podman rmi ngdmapo/${params.docker_image}:${docker_image_version}&quot;    		}    		    	}	}    post {        always {            emailext attachmentsPattern: &apos;DMAP_Extension_flask/AppBanditAnalysisReport.html,DMAP_Extension_Backend/snyk_report.html,DMAP_Extension_Backend/DMAP_App_Junit_CoverageReport.html,DMAP_Extension_Backend/DMAP_App_Junit_PassFailReport.html,DMAP_Extension_flask/SonarQube/App_Python_Sonar_Issues.xlsx,DMAP_Extension_flask/SonarQube/App_Java_Sonar_Issues.xlsx,DMAP_Extension_flask/ModularTestCoverageReport.html,DMAP_Extension_flask/ModularTestOutput.html&apos;,           // emailext attachmentsPattern: &apos;DMAP_Extension_flask/AppBanditAnalysisReport.html,DMAP_Extension_Backend/snyk_report.html,DMAP_Extension_flask/SonarQube/App_Python_Sonar_Issues.xlsx,DMAP_Extension_flask/SonarQube/App_Java_Sonar_Issues.xlsx,DMAP_Extension_flask/ModularTestCoverageReport.html,DMAP_Extension_flask/ModularTestOutput.html&apos;,            subject: &quot;Jenkins Job Report For ${BUILD_NAME} - ${currentBuild.currentResult}&quot;,			body: &quot;BUILD DETAILS: ${BUILD_DETAILS} &lt;BR&gt; BUILD STATUS: ${currentBuild.currentResult}&quot;,			to: &quot;${NOTIFYUSERS}&quot;        }        success {			script {				if ((params[&apos;Build_Type&apos;] == &apos;QA&apos; || params[&apos;Build_Type&apos;] == &apos;Prod&apos;) &amp;&amp; params[&apos;Run_Selenium_Suite&apos;] == &apos;Yes&apos;)  {					echo &quot;Going to start Selenium testsuite pipeline&quot;					// Triggering additional builds after the current build is successful					build job: &apos;8_Podman_Selenium_Test_Suite&apos;,					parameters: [						string(name: &apos;Selenium_branch&apos;, value: &quot;${params.Selenium_branch}&quot;),						string(name: &apos;Master_Node_IP_Address&apos;, value: &quot;${params.Master_Node_IP_Address}&quot;),						string(name: &apos;Worker_Node_IP_Address&apos;, value: &quot;${params.Worker_Node_IP_Address}&quot;), 						string(name: &apos;DB_Podman_Image&apos;, value: &quot;${params.DB_Podman_Image}&quot;),						string(name: &apos;APP_Podman_Image&apos;, value: &quot;${params.APP_Podman_Image}&quot;),						string(name: &apos;Release_Version&apos;, value: &quot;${params.Release_Version}&quot;),						string(name: &apos;On_Prem_DMAP_Instance&apos;, value: &quot;${params.On_Prem_DMAP_Instance}&quot;),						string(name: &apos;Selenium_Suite_Name&apos;, value: &quot;${params.Selenium_Suite_Name}&quot;),						string(name: &apos;BuildType&apos;, value: &quot;${params.BuildType}&quot;),						string(name: &apos;DMAP_License_Key&apos;, value: &quot;${params.DMAP_License_Key}&quot;),						string(name: &apos;MigrationType&apos;, value: &quot;${params.MigrationType}&quot;)					],					wait: false				}			}		}    }   }</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>