<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>Container_Name</string>        <string>Image_Name</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description/>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Image_Name</name>          <description>Enter the name of the image used for building binaries</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Container_Name</name>          <description>Enter the name of the container in lower case, example: you can put your name</description>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>Pull_Docker_Image/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline {	 agent {        node {            label 'build_slave'        }           }			environment {		APPLICATION_NAME = "Pull_Docker_Image"		NOTIFYUSERS = 'kavyasrim@newtglobalcorp.com'		//kavyasrim@newtglobal.com,debendrak@newtglobalcorp.com,sunily@newtglobalcorp.com,chimanshu@newtglobalcorp.com,sumeets@newtglobalcorp.com,dsuresh@newtglobal.com,leonig@newtglobalcorp.com,hemanthk@newtglobalcorp.com,madhavi@newtglobal.com,subramaniamsk@newtglobalcorp.com,samirc@newtglobalcorp.com'		BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"	}    tools {      nodejs "nodejs"    }		parameters {        string(name: 'Image_Name', defaultValue: '', description: 'Enter the name of the image used for building binaries')        string(name: 'Container_Name', defaultValue: '', description: 'Enter the name of the container in lower case, example: you can put your name')	}		options {        timestamps()        timeout(time: 2, unit: 'HOURS')        buildDiscarder(logRotator(numToKeepStr: '10'))    }		stages {	    	    stage ("Checkout") {			steps {			    //deleteDir()			    dir("UI"){			        //deleteDir()				    echo "Checkout the UI code"				    //git branch: "Developer", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/DMAPP.git'			    }			    dir("Backend"){			        //deleteDir()				    echo "Checkout the Backend code"				    //git branch: "Developer", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/DMAP_Backend.git'			    }			}		}				stage ("Pull") {			steps {			    script {				echo "------------Checking docker version-------------------"				//sh "docker --version"				echo "---------Checking existing docker images--------------"				//sh "docker images"							echo "------------Pulling new docker image------------------"							   				//sh "docker history 06ac807b9e23 | wc -l"								//sh "docker ps -a"				//sh "docker stop 4df404fad45e"				//sh "docker run -d -it -p 5002:5002 -p 8080:8080 --name=dmap_azure_dev_7513_7242_2 ngdmapo/dmap_azure_blob_dev:v7.5.1.3"				//sh "docker cp check_services.sh dmap_azure_dev_7513_7242_2:/usr/local/tomcat"				//sh "docker exec dmap_azure_dev_7513_7242_2 sh /usr/local/tomcat/check_services.sh"		        //sh "docker pull ngdmapo/dmap_build:v6"				//sh "docker ps -a"				//sh "docker pull ngdmapo/dmap_azure_blob_dev:v8.0.0.5"				//sh "docker ps -a"                 //def containerExists = sh(script: "docker ps -q -f name=${params.Container_Name}", returnStatus: true)                 def commandOutput = sh(script: "docker ps -q -f name=${params.Container_Name}", returnStdout: true)                echo "Value of containerExists: ${commandOutput}"                    if (commandOutput) {                        sh "docker stop ${Container_Name}"                        sh "docker rm ${Container_Name}"                        echo "Container '${Container_Name}' stopped successfully."                    } else {                        echo "Container '${Container_Name}' does not exist."                    }				echo "--------------New image pulled------------------------"		    	//sh "docker images"		    	//sh "ng version"		    	//sh "node -v"		    	//sh "java -version"		    				    }			}		}	}		post {        always {            emailext attachmentsPattern: '',            subject: "Jenkins Job Report For ${APPLICATION_NAME} - ${currentBuild.currentResult}",			body: "BUILD DETAILS: ${BUILD_DETAILS}      BUILD STATUS: ${currentBuild.currentResult}",			to: "${NOTIFYUSERS}"        }    }}</script></flow-definition>