<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties/>      <triggers/>      <parameters>        <string>APP_IMAGE_NAME</string>        <string>DB_IMAGE_NAME</string>        <string>APP_IMAGE_VERSION</string>        <string>LICENSES</string>        <string>DB_IMAGE_VERSION</string>        <string>VM_IMAGE_NAME</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description/>  <keepDependencies>false</keepDependencies>  <properties>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>DB_IMAGE_NAME</name>          <description>DMAP DB Image Name</description>          <defaultValue>ngdmapo/dmap_db_prod</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_IMAGE_VERSION</name>          <description>DMAP DB Image Version</description>          <defaultValue>latest</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_IMAGE_NAME</name>          <description>DMAP App Image Name</description>          <defaultValue>ngdmapo/dmap_app_prod</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_IMAGE_VERSION</name>          <description>DMAP App Image Version</description>          <defaultValue>latest</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>VM_IMAGE_NAME</name>          <description>GCP VM image name</description>          <defaultValue>dmap-image-080102</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>LICENSES</name>          <description>GCP producer portal marketplace release license</description>          <defaultValue>projects/newt-global-dmap/global/licenses/cloud-marketplace-5342755921e78864-df1ebeb69c0ba664</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>GCP_VM_OFFER/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline{    agent {        node {            label 'build_slave'        }    }    environment {		BUILD_NAME = "GCP VM Offer"		NOTIFYUSERS = 'dmap_dev@newtglobalcorp.com'		BUILD_DETAILS = "&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}"// 		// Hard-coded GCP variables// 		VM_NAME = 'vm-offer-instance'// 		zone = 'us-central1-b'	}         parameters {        string(name: 'DB_IMAGE_NAME', defaultValue: 'ngdmapo/dmap_db_prod', description: 'DMAP DB Image Name')        string(name: 'DB_IMAGE_VERSION', defaultValue: 'latest', description: 'DMAP DB Image Version')        string(name: 'APP_IMAGE_NAME', defaultValue: 'ngdmapo/dmap_app_prod', description: 'DMAP App Image Name')        string(name: 'APP_IMAGE_VERSION', defaultValue: 'latest', description: 'DMAP App Image Version')        string(name: 'VM_IMAGE_NAME', defaultValue: 'dmap-image-080102', description: 'GCP VM image name')        string(name: 'LICENSES', defaultValue: 'projects/newt-global-dmap/global/licenses/cloud-marketplace-5342755921e78864-df1ebeb69c0ba664', description: 'GCP producer portal marketplace release license')    }        stages {        stage('Checkout') {            steps {                  git branch: "main", credentialsId: 'Kavya_1709', url: 'https://github.com/newtglobalgit/GCP_VMOFFER_Terraform.git'                                                  withCredentials([file(credentialsId: 'Azure_Creds', variable: 'GOOGLE_CREDENTIALS_FILE')]) {                         sh 'cp ${GOOGLE_CREDENTIALS_FILE} gcp-vmoffer.json'                                          }                                    sh '''                  gcloud auth activate-service-account --key-file="gcp-vmoffer.json"                  gcloud config set project newt-global-dmap                  '''            }        }                stage('Create VM in GCP') {            steps {                script {                    sh """                        export GOOGLE_APPLICATION_CREDENTIALS="gcp-vmoffer.json"                                                terraform init -upgrade                        terraform apply -auto-approve                        """                        // Capture the output for instance_name and zone                        def instanceName = sh(script: 'terraform output -raw instance_name', returnStdout: true).trim()                        def zoneValue = sh(script: 'terraform output -raw zone', returnStdout: true).trim()                                                // Assign to environment variables                        env.VM_NAME = instanceName                        env.zone = zoneValue                                        }            }        }            stage('install podman') {        steps {            sleep(180)            sh """            gcloud compute ssh ${VM_NAME} --zone=${zone} --command="                sudo dnf update -y                sudo dnf install -y podman            "            """        }    }            stage('Pull DMAP') {        steps {            withCredentials([usernamePassword(credentialsId: 'podmanHubCred', passwordVariable: 'podmanHubPassword', usernameVariable: 'podmanHubUser')]) {                sh """                gcloud compute ssh ${VM_NAME} --zone=${zone} --command="                    sudo podman login -u ${env.podmanHubUser} -p ${env.podmanHubPassword} quay.io                    sudo podman rmi \$(sudo podman images -q) --force                    sudo podman pull ${params.DB_IMAGE_NAME}:${params.DB_IMAGE_VERSION}                    sudo podman pull ${params.APP_IMAGE_NAME}:${params.APP_IMAGE_VERSION}                "                """            }        }    }      stage('delete VM') {            steps {                         // Destroy Terraform infrastructure        sh '''        export GOOGLE_APPLICATION_CREDENTIALS="gcp-vmoffer.json"        terraform destroy -auto-approve        '''            }      }             stage('create VM image') {            steps {        sh """        gcloud compute images create ${params.VM_IMAGE_NAME} \        --project newt-global-dmap \        --source-disk projects/newt-global-dmap/zones/${zone}/disks/${VM_NAME} \        --licenses ${LICENSES} \        --description DMAP-IMAGE        """            }      }            stage('make VM image public') {            steps {        sh """                    gcloud compute images add-iam-policy-binding ${params.VM_IMAGE_NAME} \        --member=allAuthenticatedUsers \        --role=roles/compute.imageUser        """            }      }          }  post {        always {        sh """        gcloud compute disks delete ${VM_NAME} --zone=${zone}        """                 // Send email notification        emailext(            attachmentsPattern: '',            subject: "Jenkins Job Report For ${env.JOB_NAME} - ${currentBuild.currentResult}",            body: """            BUILD DETAILS: ${env.BUILD_URL} &lt;BR&gt;            BUILD STATUS: ${currentBuild.currentResult}            """,            to: "${env.NOTIFYUSERS}"        )        }    }}</script></flow-definition>