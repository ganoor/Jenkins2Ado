<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties/>      <triggers/>      <parameters/>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>A sample Job to see the Trivy scan</description>  <keepDependencies>false</keepDependencies>  <properties/>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">      <configVersion>2</configVersion>      <userRemoteConfigs>        <hudson.plugins.git.UserRemoteConfig>          <url>https://github.com/newtglobalgit/DMAP_Jenkins_Pipelines.git</url>          <credentialsId>Kavya_1709</credentialsId>        </hudson.plugins.git.UserRemoteConfig>      </userRemoteConfigs>      <branches>        <hudson.plugins.git.BranchSpec>          <name>*/scripts_backup</name>        </hudson.plugins.git.BranchSpec>      </branches>      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>      <submoduleCfg class="list"/>      <extensions/>    </scm>    <scriptPath>SampleTrivyProject/script.groovy</scriptPath>    <lightweight>true</lightweight>  </definition>  <triggers/>  <disabled>false</disabled><script>// Manually pulled from git based on configurations
pipeline {    //agent any    agent {        node {            label 'build_slave'        }    }        environment {        TEMPLATE_PATH = '@/home/devadmin/trivy/report/html.tpl'    }        stages {        /*stage('Checkout') {            steps {                // Checkout the source code from your Git repository                git 'https://github.com/your-username/your-repository.git'            }        }*/        stage('Build Docker image') {            steps {                // Build the Docker image                script {                    sh "docker pull hello-world"                    //docker pull 'hello-world'                }            }        }                stage('Docker Image Scan with Trivy and Upload') {         steps {            script {                sh "trivy image --format template --template ${TEMPLATE_PATH} --timeout 60m --scanners vuln --output Sample_trivy_report_${BUILD_NUMBER}.html hello-world"			}          }        }        /*stage('Tag Docker image') {            steps {                // Tag the Docker image                sh 'docker tag hello-world:latest your-dockerhub-username/hello-world:latest'            }        }*/        /*stage('Push Docker image') {            steps {                // Push the Docker image to Docker Hub                withCredentials([usernamePassword(credentialsId: 'dockerHubCredentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {                    sh 'echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin'                    sh 'docker push your-dockerhub-username/hello-world:latest'                }            }        }*/    }}</script></flow-definition>