<?xml version='1.1' encoding='UTF-8'?><flow-definition plugin="workflow-job@1326.ve643e00e9220">  <actions>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">      <jobProperties>        <string>jenkins.model.BuildDiscarderProperty</string>      </jobProperties>      <triggers/>      <parameters>        <string>Selenium_branch</string>        <string>Release_Version</string>        <string>UI_Port</string>        <string>DB_Service_Port</string>        <string>MigrationType</string>        <string>DataBase_APP_Port</string>        <string>DataBase_db_Port</string>        <string>Selenium_Suite_Name</string>        <string>APP_Podman_Image</string>        <string>APP_Service_Port</string>        <string>On_Prem_DMAP_Instance</string>        <string>Server_IP_Address</string>        <string>BuildType</string>        <string>DB_Podman_Image</string>        <string>DMAP_License_Key</string>      </parameters>      <options/>    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>  </actions>  <description>To run selenium test case in headless mode on centos-9 stream</description>  <keepDependencies>false</keepDependencies>  <properties>    <jenkins.model.BuildDiscarderProperty>      <strategy class="hudson.tasks.LogRotator">        <daysToKeep>-1</daysToKeep>        <numToKeep>10</numToKeep>        <artifactDaysToKeep>-1</artifactDaysToKeep>        <artifactNumToKeep>-1</artifactNumToKeep>      </strategy>    </jenkins.model.BuildDiscarderProperty>    <hudson.model.ParametersDefinitionProperty>      <parameterDefinitions>        <hudson.model.StringParameterDefinition>          <name>Selenium_branch</name>          <description>Enter the name of the selenium branch.</description>          <defaultValue>anubhav-develop</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Server_IP_Address</name>          <description>Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.</description>          <defaultValue>192.168.1.46</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Podman_Image</name>          <description>Enter podman image name in which DMAP DB is running</description>          <defaultValue>9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Podman_Image</name>          <description>Enter podman image name in which DMAP APP is running</description>          <defaultValue>9.0.0.0</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>Release_Version</name>          <description>Please specify the DMAP build version</description>          <defaultValue>9.0.0.0 | 8.3.8.5</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>On_Prem_DMAP_Instance</name>          <description>Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Yes</string>              <string>No</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>Selenium_Suite_Name</name>          <description>Please specify the selenium suite name</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>Sanity</string>              <string>E2E</string>              <string>Regression</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>BuildType</name>          <description>Please specify the build type</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>dev</string>              <string>qa</string>              <string>prod</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DMAP_License_Key</name>          <description>Please specify the DMAP License Key for Activation</description>          <defaultValue>5031D6-44F1F9-41689A-02CE59-168F8C-0F9D25</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DB_Service_Port</name>          <description>Enter the service port of server in which DMAP DB backend is running</description>          <defaultValue>7002</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>APP_Service_Port</name>          <description>Enter the serviece port of server in which DMAP APP backend is running</description>          <defaultValue>5001</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DataBase_db_Port</name>          <description>Enter the database expose port for DMAP DB backend</description>          <defaultValue>5433</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>DataBase_APP_Port</name>          <description>Enter the database expose port for DMAP APP backend</description>          <defaultValue>5435</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.StringParameterDefinition>          <name>UI_Port</name>          <description>Enter the UI port</description>          <defaultValue>9090</defaultValue>          <trim>false</trim>        </hudson.model.StringParameterDefinition>        <hudson.model.ChoiceParameterDefinition>          <name>MigrationType</name>          <description>As this is App selenium i am keeping this App Migration</description>          <choices class="java.util.Arrays$ArrayList">            <a class="string-array">              <string>App Migration</string>            </a>          </choices>        </hudson.model.ChoiceParameterDefinition>      </parameterDefinitions>    </hudson.model.ParametersDefinitionProperty>  </properties>  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3837.v305192405b_c0">    <script>pipeline {	 agent {        node {            label &apos;build_slave_app_podman_selenium&apos;        }    }		environment {		APPLICATION_NAME = &quot;DMAP App Selenium Automation&quot;		NOTIFYUSERS = &apos;dmap_dev@newtglobalcorp.com&apos;		PATH = &quot;/home/newtdba/.nvm/versions/node/v18.3.0/bin:/home/newtdba/.local/bin:/home/newtdba/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/newtdba/.nvm/versions/node/v16.18.1/bin/ng:/var/lib/jenkins/sonar-scanner-4.8.1.3023/bin:/usr/lib/jvm/java-11-openjdk-11.0.20.1.1-2.el9.x86_64/bin/java:/home/newtdba/.local/bin/bandit:/opt/sonar-scanner/bin:$PATH&quot;        JAVA_HOME = &apos;/usr/lib/jvm/java-11-openjdk-11.0.20.1.1-2.el9.x86_64&apos;	   	BUILD_DETAILS = &quot;&lt;BR&gt;Job Name: ${env.JOB_NAME} &lt;BR&gt;Build Number: ${env.BUILD_NUMBER} &lt;BR&gt;Build URL: ${BUILD_URL}&quot;	}		parameters {	    string(name: &apos;Selenium_branch&apos;, defaultValue: &apos;anubhav-develop&apos;, description: &apos;Enter the name of the selenium branch.&apos;)        string(name: &apos;Server_IP_Address&apos;, defaultValue: &apos;192.168.1.46&apos;, description: &apos;Please Enter the DMAP Master Node IP Address of the server on which DMAP is running.&apos;)		string(name: &apos;DB_Podman_Image&apos;, defaultValue: &apos;9.0.0.0&apos;, description: &apos;Enter podman image name in which DMAP DB is running&apos;)		string(name: &apos;APP_Podman_Image&apos;, defaultValue: &apos;9.0.0.0&apos;, description: &apos;Enter podman image name in which DMAP APP is running&apos;)		string(name: &apos;Release_Version&apos;, defaultValue: &apos;9.0.0.0 | 8.3.8.5&apos;, description: &apos;Please specify the DMAP build version&apos;)		choice(name: &apos;On_Prem_DMAP_Instance&apos;, choices: [&apos;Yes&apos;, &apos;No&apos;], description: &apos;Please Specify On-Prem VM or Azure VM testing. Please specify Yes for On-Prem VM and No for Azure VM.&apos;)		choice(name: &apos;Selenium_Suite_Name&apos;, choices: [&apos;Sanity&apos;, &apos;E2E&apos;,&apos;Regression&apos;], description: &apos;Please specify the selenium suite name&apos;)		choice(name: &apos;BuildType&apos;, choices: [&apos;dev&apos;, &apos;qa&apos;,&apos;prod&apos;], description: &apos;Please specify the build type&apos;)		string(name: &apos;DMAP_License_Key&apos;, defaultValue: &apos;5031D6-44F1F9-41689A-02CE59-168F8C-0F9D25&apos;, description: &apos;Please specify the DMAP License Key for Activation&apos;)		string(name: &apos;DB_Service_Port&apos;, defaultValue: &apos;7002&apos;, description: &apos;Enter the service port of server in which DMAP DB backend is running&apos;)        string(name: &apos;APP_Service_Port&apos;, defaultValue: &apos;5001&apos;, description: &apos;Enter the serviece port of server in which DMAP APP backend is running&apos;)        string(name: &apos;DataBase_db_Port&apos;, defaultValue: &apos;5433&apos;, description: &apos;Enter the database expose port for DMAP DB backend&apos;)        string(name: &apos;DataBase_APP_Port&apos;, defaultValue: &apos;5435&apos;, description: &apos;Enter the database expose port for DMAP APP backend&apos;)        string(name: &apos;UI_Port&apos;, defaultValue: &apos;9090&apos;, description: &apos;Enter the UI port&apos;)        choice(name: &apos;MigrationType&apos;, choices: [&apos;App Migration&apos;], description: &apos;As this is App selenium i am keeping this App Migration&apos;)		    }		options {        timestamps()        timeout(time: 3, unit: &apos;HOURS&apos;)        buildDiscarder(logRotator(numToKeepStr: &apos;10&apos;))    }    		stages {        stage (&quot;Start DMAP Backend&quot;) {		    steps {		        script {                        def containerNameMaster = &apos;selenium_app_master_test_&apos;                        def containerNameWorker = &apos;selenium_app_worker_test_&apos;                        def containerNameDB = &apos;selenium_db_master_test_&apos;                     // Function to check if container exists, stop, and remove it if needed                                             def removeExistingContainer = {containerNamePrefix -&gt;                            // Use grep with a regex to match containers that start with the given prefix                            def isRunning = sh(script:&quot;podman ps --all --format &apos;{{.Names}}&apos; | grep &apos;^${containerNamePrefix}&apos;&quot;, returnStatus: true)                            if(isRunning==0){                                echo &quot;Container with name ${containerNamePrefix} exists. Stopping and removing it..&quot;                                sh &quot;podman ps --all --format &apos;{{.Names}}&apos; | grep &apos;^${containerNamePrefix}&apos; | xargs -r -I {} podman stop {}&quot;                                sh &quot;podman ps --all --format &apos;{{.Names}}&apos; | grep &apos;^${containerNamePrefix}&apos; | xargs -r -I {} podman rm {}&quot;                                //sh &quot;podman rm ${containerName}&quot;                            }else{                                echo &quot;Container with name ${containerNamePrefix} does not exist. No need to remove.&quot;                            }                        }                        //remove container call                        removeExistingContainer(containerNameMaster)                        removeExistingContainer(containerNameWorker)                        removeExistingContainer(containerNameDB)		                echo &quot;---------------------Creating build container---------------------------&quot;					   // echo &quot;podman run -d -it -p 5435:5432 -p 8091:8080 -p 5001:5000 --name=app_master_test quay.io/newtglobaldev/ngdmapo/dmap_app_migration_azure_blob_podman_${params.BuildType}:v${params.APP_Podman_Image}&quot;					   // echo &quot;podman run -d -it -p 5436:5432 -p 8092:8080 -p 5005:5000 --name=app_worker_test quay.io/newtglobaldev/ngdmapo/dmap_app_migration_azure_blob_podman_${params.BuildType}:v${params.APP_Podman_Image}&quot;					   // echo &quot;podman run -d -it -p 5433:5432 -p 9090:8080 -p 5002:5002 -e UI_PORT=9090 -e SERVICE_PORT=5002  -e DB_PORT=5433 --name=db_master_test quay.io/newtglobaldev/ngdmapo/dmap_azure_blob_podman_${params.BuildType}:v${params.DB_Podman_Image}&quot;				                                //App Master					    sh &quot;podman run -d -it -p ${params.DataBase_APP_Port}:5432 -p 8091:8080 -p ${params.APP_Service_Port}:5000 --name=selenium_app_master_test_${params.BuildType} quay.io/newtglobaldev/ngdmapo/dmap_app_${params.BuildType}:v${params.APP_Podman_Image}&quot;						//Db Master						sh &quot;podman run -d -it -p ${params.DataBase_db_Port}:5432 -p ${params.UI_Port}:8080 -p ${params.DB_Service_Port}:5002 -e UI_PORT=${params.UI_Port} -e SERVICE_PORT=${params.DB_Service_Port}  -e DB_PORT=${params.DataBase_db_Port} --name=selenium_db_master_test_${params.BuildType} quay.io/newtglobaldev/ngdmapo/dmap_db_${params.BuildType}:v${params.DB_Podman_Image}&quot;						//App Slave						sh &quot;podman run -d -it -p 8092:8080 -p 5005:5000 --name=selenium_app_worker_test_${params.BuildType} quay.io/newtglobaldev/ngdmapo/dmap_app_${params.BuildType}:v${params.APP_Podman_Image}&quot;				        echo &quot;------------------Wait 5 minutes to start backend-------------------------------&quot;				       def totalWaitTime = 2 * 60 // 30 minutes in seconds                        def interval = 60 // Check every minute (60 seconds)                        while (totalWaitTime &gt; 0) {                if(totalWaitTime&lt;2)                {                echo &quot;Time left: ${totalWaitTime / 60} minutes&quot;                }                sleep(interval) // Sleep for 60 seconds (1 minute)                totalWaitTime -= interval // Decrease the remaining time            }            echo &quot;------------------Done waiting!-------------------------------&quot;                		            		        }			}	    }		stage (&quot;Checkout&quot;) {			steps {			    			  dir(&quot;Selenium_Automation&quot;){			     deleteDir()				echo &quot;------------------------Checkout Code --------------------------------&quot;				sh &quot;pwd&quot;				git branch: &quot;${params.Selenium_branch}&quot;, credentialsId: &apos;Kavya_1709&apos;, url: &apos;https://github.com/newtglobalgit/DMAP_QA_Automation.git&apos;				echo &quot;------------------------ Checkout Code Completed --------------------------------&quot;								echo &quot;------------------------ Replace data in TC001_Login.ini and Config.properties File--------------------------------&quot;                sh &quot;&quot;&quot;sed -i -e&apos;/^\\[masternodeipfqdn\\]/,/^ip =/ s/^ip = .*/ip = ${Server_IP_Address}/&apos; src/main/resources/TestdataFiles/TC001_Login.ini&quot;&quot;&quot;			    sh &quot;&quot;&quot;sed -i -e &apos;/^\\[appmasternodeipfqdn\\]/,/^ip =/ s/^ip = .*/ip = ${Server_IP_Address}/&apos; src/main/resources/TestdataFiles/TC001_Login.ini&quot;&quot;&quot;                sh &quot;&quot;&quot;sed -i -e &apos;/^\\[Enterprise_License\\]/,/^Key =/ s/^Key = .*/Key = ${DMAP_License_Key}/&apos; src/main/resources/TestdataFiles/TC001_Login.ini&quot;&quot;&quot;                sh &quot;&quot;&quot;sed -i -e &apos;/^\\[serviceip\\]/,/^Key =/ s/^Key = .*/Key = ${APP_Service_Port}/&apos; src/main/resources/TestdataFiles/TC001_Login.ini&quot;&quot;&quot;				sh &quot;&quot;&quot;sed -i -e &apos;/^\\[NodeData1\\]/,/^ip =/ s/^ip = .*/ip = ${Server_IP_Address}/&apos; src/main/resources/TestdataFiles/WorkerNode.ini&quot;&quot;&quot;                sh &quot;&quot;&quot;sed -i -e &quot;s/^FeatureName = .*/FeatureName = ${params.MigrationType}/&quot; src/main/resources/Configuration/Config.properties&quot;&quot;&quot;				sh &quot;&quot;&quot;sed -i -e &quot;s/^BuildType = .*/BuildType = ${params.BuildType}/&quot; src/main/resources/Configuration/Config.properties&quot;&quot;&quot;				sh &quot;&quot;&quot;sed -i -e &quot;s/^SuiteName = .*/SuiteName = ${params.Selenium_Suite_Name}/&quot; src/main/resources/Configuration/Config.properties&quot;&quot;&quot;				sh &quot;&quot;&quot;sed -i -e &quot;s/^ReleaseVersion = .*/ReleaseVersion = ${params.Release_Version}/&quot; src/main/resources/Configuration/Config.properties&quot;&quot;&quot;				sh &quot;&quot;&quot;sed -i -e &quot;s/^UiPort = .*/UiPort = ${params.UI_Port}/&quot; src/main/resources/Configuration/Config.properties&quot;&quot;&quot;				}			   			}		}				//anubhav since it was unable to find container to test !!!			 stage (&quot;Build the project&quot;) {			steps {			    			    dir(&quot;Selenium_Automation&quot;){				echo &quot;------------------------ Build the selenium project --------------------------------&quot;				sh &quot;pwd&quot;				sh &quot;mvn clean package&quot;				echo &quot;------------------------ Selenium Project Build Completed --------------------------------&quot;				sh &quot;pwd&quot;				}			}		} 		/* anubhav		stage(&apos;Check and Remove Podman Container&apos;) {            steps {                script {                    // Define the name of the Podman container you want to check                    def containerName = &apos;run_selenium&apos;                    // Check if the Docker container is running                    def isRunning = sh(script: &quot;podman ps --format &apos;{{.Names}}&apos; | grep -w ${containerName}&quot;, returnStatus: true)                    if (isRunning == 0) {                        echo &quot;Container ${containerName} is running. Stopping and removing it...&quot;                        // Stop and remove the Podman container                        sh &quot;podman stop ${containerName}&quot;                        sh &quot;podman rm ${containerName}&quot;                    } else {                        echo &quot;Container ${containerName} is not running.&quot;                    }                }            }        }*//* already created		stage (&quot;Start DMAP&quot;) {            steps {                script {                    if (params.On_Prem_DMAP_Instance == &apos;Yes&apos; &amp;&amp; params.MigrationType == &apos;App Migration&apos;) {                        echo &quot;---------------------Creating DMAP DB and App Podman Container---------------------------&quot;                                                sh &quot;podman run -d -it -p 5435:5432 -p 9090:8080 -p 6003:5002 -e UI_PORT=9090 -e SERVICE_PORT=6003  -e DB_PORT=5435 --name=run_db_selenium_master ${params.DB_Podman_Image}&quot;                        sh &quot;podman run -d -it -p 8091:8080 -p 5001:5000 --name=run_app_selenium_master ${params.APP_Podman_Image}&quot;                    sleep 4000                    }                }            }		}*/       stage(&quot;Running Selenium Test Suite&quot;) {    steps {        echo &quot;------------------------ Running Selenium testcases --------------------------------&quot;        script {            def xmlFilePath            // Determine the XML file path based on MigrationType and Selenium_Suite_Name            if (params.MigrationType == &apos;App Migration&apos;) {                echo &quot;---------------- App Migration Selected ------------------------&quot;                if (params.Selenium_Suite_Name == &apos;E2E&apos;) {                    echo &quot;---------------- App Migration E2E Selected ------------------------&quot;                    xmlFilePath = &apos;src/main/resources/TestNG/e2eAppMigration.xml&apos;                } else if (params.Selenium_Suite_Name == &apos;Sanity&apos;) {                    echo &quot;---------------- App Migration Sanity Selected ------------------------&quot;                    xmlFilePath = &apos;src/main/resources/TestNG/e2eAppMigration.xml&apos;                } else if (params.Selenium_Suite_Name == &apos;Regression&apos;) {                    echo &quot;---------------- App Migration Regression Selected ------------------------&quot;                    xmlFilePath = &apos;src/main/resources/TestNG/RegressionAppMigration.xml&apos;                }            }            // Validate if xmlFilePath is set            if (!xmlFilePath) {                error &quot;No matching XML file found for buildType: ${params.buildType} and Selenium_Suite_Name: ${params.Selenium_Suite_Name}&quot;            }            echo &quot;Using XML file path: ${xmlFilePath}&quot;            // Run the Selenium test with the determined XML file            dir(&quot;Selenium_Automation&quot;) {                def exitCode = sh(script: &quot;java -cp &apos;target/XpandionFramework2-0.0.1-SNAPSHOT-jar-with-dependencies.jar&apos; org.testng.TestNG &apos;${xmlFilePath}&apos;&quot;, returnStatus: true)                if (exitCode != 0) {                    echo &quot;Selenium tests completed with exit code ${exitCode}. Ignoring failure.&quot;                }            }        }        echo &quot;------------------------ Selenium testcases execution completed --------------------------------&quot;    }}		/* Anubhav		stage (&quot;Remove Container&quot;) {			steps {			    script {		            if (params.On_Prem_DMAP_Instance == &apos;Yes&apos; &amp;&amp; params.MigrationType == &apos;App Migration&apos;) { 					  echo &quot;------------------Stop selenium testing container ------------------&quot;			          sh &quot;podman stop run_db_selenium_master&quot;					  sh &quot;podman stop run_app_selenium_master&quot;			          sh &quot;podman rm -f run_db_selenium_master&quot;					  sh &quot;podman rm -f run_app_selenium_master&quot;		            }		            echo &quot;------------------Selenium testing container removed successfully------------------&quot;		        }			}		}*/			    stage(&apos;Find Latest Report&apos;) {            steps {                script {                    // Execute the shell script to find the latest report file                    def latestReport = sh(                        script: &apos;&apos;&apos;                            cd Selenium_Automation/extent-reports/Reports                            latest_report=$(ls -t | grep -E &apos;.*_.*_.*_.*\\.html&apos; | head -n 1)                            echo $latest_report                        &apos;&apos;&apos;,                        returnStdout: true                    ).trim()                                        // Set the environment variable                    env.LATEST_REPORT = &quot;Selenium_Automation/extent-reports/Reports/${latestReport}&quot;                }            }        }		   }    post {        success {            emailext(                attachmentsPattern: &quot;${env.LATEST_REPORT}&quot;,                subject: &quot;Jenkins Job Report For ${APPLICATION_NAME} ${params.MigrationType} - SUCCESS&quot;,                body: &quot;BUILD DETAILS: ${BUILD_DETAILS}      BUILD STATUS: SUCCESS&quot;,                to: &quot;${NOTIFYUSERS}&quot;            )        }        failure {            emailext(                subject: &quot;Jenkins Job Report For ${APPLICATION_NAME} ${params.MigrationType} - FAILURE&quot;,                body: &quot;BUILD STATUS: FAILURE&quot;,                to: &quot;${NOTIFYUSERS}&quot;            )        }    }	}</script>    <sandbox>true</sandbox>  </definition>  <triggers/>  <disabled>false</disabled></flow-definition>